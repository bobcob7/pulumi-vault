// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Autopilot enables automated workflows for managing Raft clusters. The
 * current feature set includes 3 main features: Server Stabilization, Dead
 * Server Cleanup and State API. **These three features are introduced in
 * Vault 1.7.**
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vault from "@pulumi/vault";
 *
 * const autopilot = new vault.RaftAutopilot("autopilot", {
 *     cleanupDeadServers: true,
 *     deadServerLastContactThreshold: "24h0m0s",
 *     lastContactThreshold: "10s",
 *     maxTrailingLogs: 1000,
 *     minQuorum: 3,
 *     serverStabilizationTime: "10s",
 * });
 * ```
 */
export class RaftAutopilot extends pulumi.CustomResource {
    /**
     * Get an existing RaftAutopilot resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RaftAutopilotState, opts?: pulumi.CustomResourceOptions): RaftAutopilot {
        return new RaftAutopilot(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vault:index/raftAutopilot:RaftAutopilot';

    /**
     * Returns true if the given object is an instance of RaftAutopilot.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RaftAutopilot {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RaftAutopilot.__pulumiType;
    }

    /**
     * Specifies whether to remove dead server nodes
     * periodically or when a new server joins. This requires that `min-quorum` is also set.
     */
    public readonly cleanupDeadServers!: pulumi.Output<boolean | undefined>;
    /**
     * Limit the amount of time a 
     * server can go without leader contact before being considered failed. This only takes
     * effect when `cleanupDeadServers` is set.
     */
    public readonly deadServerLastContactThreshold!: pulumi.Output<string | undefined>;
    /**
     * Limit the amount of time a server can go 
     * without leader contact before being considered unhealthy.
     */
    public readonly lastContactThreshold!: pulumi.Output<string | undefined>;
    /**
     * Maximum number of log entries in the Raft log 
     * that a server can be behind its leader before being considered unhealthy.
     */
    public readonly maxTrailingLogs!: pulumi.Output<number | undefined>;
    /**
     * Minimum number of servers allowed in a cluster before 
     * autopilot can prune dead servers. This should at least be 3. Applicable only for
     * voting nodes.
     */
    public readonly minQuorum!: pulumi.Output<number | undefined>;
    /**
     * Minimum amount of time a server must be 
     * stable in the 'healthy' state before being added to the cluster.
     */
    public readonly serverStabilizationTime!: pulumi.Output<string | undefined>;

    /**
     * Create a RaftAutopilot resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: RaftAutopilotArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RaftAutopilotArgs | RaftAutopilotState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RaftAutopilotState | undefined;
            inputs["cleanupDeadServers"] = state ? state.cleanupDeadServers : undefined;
            inputs["deadServerLastContactThreshold"] = state ? state.deadServerLastContactThreshold : undefined;
            inputs["lastContactThreshold"] = state ? state.lastContactThreshold : undefined;
            inputs["maxTrailingLogs"] = state ? state.maxTrailingLogs : undefined;
            inputs["minQuorum"] = state ? state.minQuorum : undefined;
            inputs["serverStabilizationTime"] = state ? state.serverStabilizationTime : undefined;
        } else {
            const args = argsOrState as RaftAutopilotArgs | undefined;
            inputs["cleanupDeadServers"] = args ? args.cleanupDeadServers : undefined;
            inputs["deadServerLastContactThreshold"] = args ? args.deadServerLastContactThreshold : undefined;
            inputs["lastContactThreshold"] = args ? args.lastContactThreshold : undefined;
            inputs["maxTrailingLogs"] = args ? args.maxTrailingLogs : undefined;
            inputs["minQuorum"] = args ? args.minQuorum : undefined;
            inputs["serverStabilizationTime"] = args ? args.serverStabilizationTime : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(RaftAutopilot.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RaftAutopilot resources.
 */
export interface RaftAutopilotState {
    /**
     * Specifies whether to remove dead server nodes
     * periodically or when a new server joins. This requires that `min-quorum` is also set.
     */
    cleanupDeadServers?: pulumi.Input<boolean>;
    /**
     * Limit the amount of time a 
     * server can go without leader contact before being considered failed. This only takes
     * effect when `cleanupDeadServers` is set.
     */
    deadServerLastContactThreshold?: pulumi.Input<string>;
    /**
     * Limit the amount of time a server can go 
     * without leader contact before being considered unhealthy.
     */
    lastContactThreshold?: pulumi.Input<string>;
    /**
     * Maximum number of log entries in the Raft log 
     * that a server can be behind its leader before being considered unhealthy.
     */
    maxTrailingLogs?: pulumi.Input<number>;
    /**
     * Minimum number of servers allowed in a cluster before 
     * autopilot can prune dead servers. This should at least be 3. Applicable only for
     * voting nodes.
     */
    minQuorum?: pulumi.Input<number>;
    /**
     * Minimum amount of time a server must be 
     * stable in the 'healthy' state before being added to the cluster.
     */
    serverStabilizationTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RaftAutopilot resource.
 */
export interface RaftAutopilotArgs {
    /**
     * Specifies whether to remove dead server nodes
     * periodically or when a new server joins. This requires that `min-quorum` is also set.
     */
    cleanupDeadServers?: pulumi.Input<boolean>;
    /**
     * Limit the amount of time a 
     * server can go without leader contact before being considered failed. This only takes
     * effect when `cleanupDeadServers` is set.
     */
    deadServerLastContactThreshold?: pulumi.Input<string>;
    /**
     * Limit the amount of time a server can go 
     * without leader contact before being considered unhealthy.
     */
    lastContactThreshold?: pulumi.Input<string>;
    /**
     * Maximum number of log entries in the Raft log 
     * that a server can be behind its leader before being considered unhealthy.
     */
    maxTrailingLogs?: pulumi.Input<number>;
    /**
     * Minimum number of servers allowed in a cluster before 
     * autopilot can prune dead servers. This should at least be 3. Applicable only for
     * voting nodes.
     */
    minQuorum?: pulumi.Input<number>;
    /**
     * Minimum amount of time a server must be 
     * stable in the 'healthy' state before being added to the cluster.
     */
    serverStabilizationTime?: pulumi.Input<string>;
}
