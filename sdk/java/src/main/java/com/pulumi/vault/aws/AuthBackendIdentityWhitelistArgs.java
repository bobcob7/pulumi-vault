// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault.aws;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AuthBackendIdentityWhitelistArgs extends com.pulumi.resources.ResourceArgs {

    public static final AuthBackendIdentityWhitelistArgs Empty = new AuthBackendIdentityWhitelistArgs();

    /**
     * The path of the AWS backend being configured.
     * 
     */
    @Import(name="backend")
    private @Nullable Output<String> backend;

    /**
     * @return The path of the AWS backend being configured.
     * 
     */
    public Optional<Output<String>> backend() {
        return Optional.ofNullable(this.backend);
    }

    /**
     * If set to true, disables the periodic
     * tidying of the identity-whitelist entries.
     * 
     */
    @Import(name="disablePeriodicTidy")
    private @Nullable Output<Boolean> disablePeriodicTidy;

    /**
     * @return If set to true, disables the periodic
     * tidying of the identity-whitelist entries.
     * 
     */
    public Optional<Output<Boolean>> disablePeriodicTidy() {
        return Optional.ofNullable(this.disablePeriodicTidy);
    }

    /**
     * The amount of extra time, in minutes, that must
     * have passed beyond the roletag expiration, before it is removed from the
     * backend storage.
     * 
     */
    @Import(name="safetyBuffer")
    private @Nullable Output<Integer> safetyBuffer;

    /**
     * @return The amount of extra time, in minutes, that must
     * have passed beyond the roletag expiration, before it is removed from the
     * backend storage.
     * 
     */
    public Optional<Output<Integer>> safetyBuffer() {
        return Optional.ofNullable(this.safetyBuffer);
    }

    private AuthBackendIdentityWhitelistArgs() {}

    private AuthBackendIdentityWhitelistArgs(AuthBackendIdentityWhitelistArgs $) {
        this.backend = $.backend;
        this.disablePeriodicTidy = $.disablePeriodicTidy;
        this.safetyBuffer = $.safetyBuffer;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AuthBackendIdentityWhitelistArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AuthBackendIdentityWhitelistArgs $;

        public Builder() {
            $ = new AuthBackendIdentityWhitelistArgs();
        }

        public Builder(AuthBackendIdentityWhitelistArgs defaults) {
            $ = new AuthBackendIdentityWhitelistArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param backend The path of the AWS backend being configured.
         * 
         * @return builder
         * 
         */
        public Builder backend(@Nullable Output<String> backend) {
            $.backend = backend;
            return this;
        }

        /**
         * @param backend The path of the AWS backend being configured.
         * 
         * @return builder
         * 
         */
        public Builder backend(String backend) {
            return backend(Output.of(backend));
        }

        /**
         * @param disablePeriodicTidy If set to true, disables the periodic
         * tidying of the identity-whitelist entries.
         * 
         * @return builder
         * 
         */
        public Builder disablePeriodicTidy(@Nullable Output<Boolean> disablePeriodicTidy) {
            $.disablePeriodicTidy = disablePeriodicTidy;
            return this;
        }

        /**
         * @param disablePeriodicTidy If set to true, disables the periodic
         * tidying of the identity-whitelist entries.
         * 
         * @return builder
         * 
         */
        public Builder disablePeriodicTidy(Boolean disablePeriodicTidy) {
            return disablePeriodicTidy(Output.of(disablePeriodicTidy));
        }

        /**
         * @param safetyBuffer The amount of extra time, in minutes, that must
         * have passed beyond the roletag expiration, before it is removed from the
         * backend storage.
         * 
         * @return builder
         * 
         */
        public Builder safetyBuffer(@Nullable Output<Integer> safetyBuffer) {
            $.safetyBuffer = safetyBuffer;
            return this;
        }

        /**
         * @param safetyBuffer The amount of extra time, in minutes, that must
         * have passed beyond the roletag expiration, before it is removed from the
         * backend storage.
         * 
         * @return builder
         * 
         */
        public Builder safetyBuffer(Integer safetyBuffer) {
            return safetyBuffer(Output.of(safetyBuffer));
        }

        public AuthBackendIdentityWhitelistArgs build() {
            return $;
        }
    }

}
