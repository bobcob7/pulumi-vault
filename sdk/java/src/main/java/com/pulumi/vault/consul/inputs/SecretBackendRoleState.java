// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault.consul.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SecretBackendRoleState extends com.pulumi.resources.ResourceArgs {

    public static final SecretBackendRoleState Empty = new SecretBackendRoleState();

    /**
     * The unique name of an existing Consul secrets backend mount. Must not begin or end with a `/`. One of `path` or `backend` is required.
     * 
     */
    @Import(name="backend")
    private @Nullable Output<String> backend;

    /**
     * @return The unique name of an existing Consul secrets backend mount. Must not begin or end with a `/`. One of `path` or `backend` is required.
     * 
     */
    public Optional<Output<String>> backend() {
        return Optional.ofNullable(this.backend);
    }

    /**
     * The Consul namespace that the token will be created in.
     * Applicable for Vault 1.10+ and Consul 1.7+&#34;,
     * 
     */
    @Import(name="consulNamespace")
    private @Nullable Output<String> consulNamespace;

    /**
     * @return The Consul namespace that the token will be created in.
     * Applicable for Vault 1.10+ and Consul 1.7+&#34;,
     * 
     */
    public Optional<Output<String>> consulNamespace() {
        return Optional.ofNullable(this.consulNamespace);
    }

    /**
     * Set of Consul roles to attach to the token.
     * Applicable for Vault 1.10+ with Consul 1.5+.
     * 
     */
    @Import(name="consulRoles")
    private @Nullable Output<List<String>> consulRoles;

    /**
     * @return Set of Consul roles to attach to the token.
     * Applicable for Vault 1.10+ with Consul 1.5+.
     * 
     */
    public Optional<Output<List<String>>> consulRoles() {
        return Optional.ofNullable(this.consulRoles);
    }

    /**
     * Indicates that the token should not be replicated globally and instead be local to the current datacenter.
     * 
     */
    @Import(name="local")
    private @Nullable Output<Boolean> local;

    /**
     * @return Indicates that the token should not be replicated globally and instead be local to the current datacenter.
     * 
     */
    public Optional<Output<Boolean>> local() {
        return Optional.ofNullable(this.local);
    }

    /**
     * Maximum TTL for leases associated with this role, in seconds.
     * 
     */
    @Import(name="maxTtl")
    private @Nullable Output<Integer> maxTtl;

    /**
     * @return Maximum TTL for leases associated with this role, in seconds.
     * 
     */
    public Optional<Output<Integer>> maxTtl() {
        return Optional.ofNullable(this.maxTtl);
    }

    /**
     * The name of the Consul secrets engine role to create.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the Consul secrets engine role to create.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The admin partition that the token will be created in.
     * Applicable for Vault 1.10+ and Consul 1.11+&#34;,
     * 
     */
    @Import(name="partition")
    private @Nullable Output<String> partition;

    /**
     * @return The admin partition that the token will be created in.
     * Applicable for Vault 1.10+ and Consul 1.11+&#34;,
     * 
     */
    public Optional<Output<String>> partition() {
        return Optional.ofNullable(this.partition);
    }

    /**
     * The list of Consul ACL policies to associate with these roles.
     * 
     */
    @Import(name="policies")
    private @Nullable Output<List<String>> policies;

    /**
     * @return The list of Consul ACL policies to associate with these roles.
     * 
     */
    public Optional<Output<List<String>>> policies() {
        return Optional.ofNullable(this.policies);
    }

    /**
     * Specifies the type of token to create when using this role. Valid values are &#34;client&#34; or &#34;management&#34;.
     * 
     */
    @Import(name="tokenType")
    private @Nullable Output<String> tokenType;

    /**
     * @return Specifies the type of token to create when using this role. Valid values are &#34;client&#34; or &#34;management&#34;.
     * 
     */
    public Optional<Output<String>> tokenType() {
        return Optional.ofNullable(this.tokenType);
    }

    /**
     * Specifies the TTL for this role.
     * 
     */
    @Import(name="ttl")
    private @Nullable Output<Integer> ttl;

    /**
     * @return Specifies the TTL for this role.
     * 
     */
    public Optional<Output<Integer>> ttl() {
        return Optional.ofNullable(this.ttl);
    }

    private SecretBackendRoleState() {}

    private SecretBackendRoleState(SecretBackendRoleState $) {
        this.backend = $.backend;
        this.consulNamespace = $.consulNamespace;
        this.consulRoles = $.consulRoles;
        this.local = $.local;
        this.maxTtl = $.maxTtl;
        this.name = $.name;
        this.partition = $.partition;
        this.policies = $.policies;
        this.tokenType = $.tokenType;
        this.ttl = $.ttl;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SecretBackendRoleState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SecretBackendRoleState $;

        public Builder() {
            $ = new SecretBackendRoleState();
        }

        public Builder(SecretBackendRoleState defaults) {
            $ = new SecretBackendRoleState(Objects.requireNonNull(defaults));
        }

        /**
         * @param backend The unique name of an existing Consul secrets backend mount. Must not begin or end with a `/`. One of `path` or `backend` is required.
         * 
         * @return builder
         * 
         */
        public Builder backend(@Nullable Output<String> backend) {
            $.backend = backend;
            return this;
        }

        /**
         * @param backend The unique name of an existing Consul secrets backend mount. Must not begin or end with a `/`. One of `path` or `backend` is required.
         * 
         * @return builder
         * 
         */
        public Builder backend(String backend) {
            return backend(Output.of(backend));
        }

        /**
         * @param consulNamespace The Consul namespace that the token will be created in.
         * Applicable for Vault 1.10+ and Consul 1.7+&#34;,
         * 
         * @return builder
         * 
         */
        public Builder consulNamespace(@Nullable Output<String> consulNamespace) {
            $.consulNamespace = consulNamespace;
            return this;
        }

        /**
         * @param consulNamespace The Consul namespace that the token will be created in.
         * Applicable for Vault 1.10+ and Consul 1.7+&#34;,
         * 
         * @return builder
         * 
         */
        public Builder consulNamespace(String consulNamespace) {
            return consulNamespace(Output.of(consulNamespace));
        }

        /**
         * @param consulRoles Set of Consul roles to attach to the token.
         * Applicable for Vault 1.10+ with Consul 1.5+.
         * 
         * @return builder
         * 
         */
        public Builder consulRoles(@Nullable Output<List<String>> consulRoles) {
            $.consulRoles = consulRoles;
            return this;
        }

        /**
         * @param consulRoles Set of Consul roles to attach to the token.
         * Applicable for Vault 1.10+ with Consul 1.5+.
         * 
         * @return builder
         * 
         */
        public Builder consulRoles(List<String> consulRoles) {
            return consulRoles(Output.of(consulRoles));
        }

        /**
         * @param consulRoles Set of Consul roles to attach to the token.
         * Applicable for Vault 1.10+ with Consul 1.5+.
         * 
         * @return builder
         * 
         */
        public Builder consulRoles(String... consulRoles) {
            return consulRoles(List.of(consulRoles));
        }

        /**
         * @param local Indicates that the token should not be replicated globally and instead be local to the current datacenter.
         * 
         * @return builder
         * 
         */
        public Builder local(@Nullable Output<Boolean> local) {
            $.local = local;
            return this;
        }

        /**
         * @param local Indicates that the token should not be replicated globally and instead be local to the current datacenter.
         * 
         * @return builder
         * 
         */
        public Builder local(Boolean local) {
            return local(Output.of(local));
        }

        /**
         * @param maxTtl Maximum TTL for leases associated with this role, in seconds.
         * 
         * @return builder
         * 
         */
        public Builder maxTtl(@Nullable Output<Integer> maxTtl) {
            $.maxTtl = maxTtl;
            return this;
        }

        /**
         * @param maxTtl Maximum TTL for leases associated with this role, in seconds.
         * 
         * @return builder
         * 
         */
        public Builder maxTtl(Integer maxTtl) {
            return maxTtl(Output.of(maxTtl));
        }

        /**
         * @param name The name of the Consul secrets engine role to create.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the Consul secrets engine role to create.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param partition The admin partition that the token will be created in.
         * Applicable for Vault 1.10+ and Consul 1.11+&#34;,
         * 
         * @return builder
         * 
         */
        public Builder partition(@Nullable Output<String> partition) {
            $.partition = partition;
            return this;
        }

        /**
         * @param partition The admin partition that the token will be created in.
         * Applicable for Vault 1.10+ and Consul 1.11+&#34;,
         * 
         * @return builder
         * 
         */
        public Builder partition(String partition) {
            return partition(Output.of(partition));
        }

        /**
         * @param policies The list of Consul ACL policies to associate with these roles.
         * 
         * @return builder
         * 
         */
        public Builder policies(@Nullable Output<List<String>> policies) {
            $.policies = policies;
            return this;
        }

        /**
         * @param policies The list of Consul ACL policies to associate with these roles.
         * 
         * @return builder
         * 
         */
        public Builder policies(List<String> policies) {
            return policies(Output.of(policies));
        }

        /**
         * @param policies The list of Consul ACL policies to associate with these roles.
         * 
         * @return builder
         * 
         */
        public Builder policies(String... policies) {
            return policies(List.of(policies));
        }

        /**
         * @param tokenType Specifies the type of token to create when using this role. Valid values are &#34;client&#34; or &#34;management&#34;.
         * 
         * @return builder
         * 
         */
        public Builder tokenType(@Nullable Output<String> tokenType) {
            $.tokenType = tokenType;
            return this;
        }

        /**
         * @param tokenType Specifies the type of token to create when using this role. Valid values are &#34;client&#34; or &#34;management&#34;.
         * 
         * @return builder
         * 
         */
        public Builder tokenType(String tokenType) {
            return tokenType(Output.of(tokenType));
        }

        /**
         * @param ttl Specifies the TTL for this role.
         * 
         * @return builder
         * 
         */
        public Builder ttl(@Nullable Output<Integer> ttl) {
            $.ttl = ttl;
            return this;
        }

        /**
         * @param ttl Specifies the TTL for this role.
         * 
         * @return builder
         * 
         */
        public Builder ttl(Integer ttl) {
            return ttl(Output.of(ttl));
        }

        public SecretBackendRoleState build() {
            return $;
        }
    }

}
