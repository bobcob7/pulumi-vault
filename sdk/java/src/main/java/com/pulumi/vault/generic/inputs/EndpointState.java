// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault.generic.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EndpointState extends com.pulumi.resources.ResourceArgs {

    public static final EndpointState Empty = new EndpointState();

    /**
     * String containing a JSON-encoded object that will be
     * written to the given path as the secret data.
     * 
     */
    @Import(name="dataJson")
    private @Nullable Output<String> dataJson;

    /**
     * @return String containing a JSON-encoded object that will be
     * written to the given path as the secret data.
     * 
     */
    public Optional<Output<String>> dataJson() {
        return Optional.ofNullable(this.dataJson);
    }

    /**
     * Don&#39;t attempt to delete the path from Vault if true
     * 
     */
    @Import(name="disableDelete")
    private @Nullable Output<Boolean> disableDelete;

    /**
     * @return Don&#39;t attempt to delete the path from Vault if true
     * 
     */
    public Optional<Output<Boolean>> disableDelete() {
        return Optional.ofNullable(this.disableDelete);
    }

    /**
     * True/false. Set this to true if your vault
     * authentication is not able to read the data or if the endpoint does
     * not support the `GET` method. Setting this to `true` will break drift
     * detection. You should set this to `true` for endpoints that are
     * write-only. Defaults to false.
     * 
     */
    @Import(name="disableRead")
    private @Nullable Output<Boolean> disableRead;

    /**
     * @return True/false. Set this to true if your vault
     * authentication is not able to read the data or if the endpoint does
     * not support the `GET` method. Setting this to `true` will break drift
     * detection. You should set this to `true` for endpoints that are
     * write-only. Defaults to false.
     * 
     */
    public Optional<Output<Boolean>> disableRead() {
        return Optional.ofNullable(this.disableRead);
    }

    /**
     * When reading, disregard fields not present in data_json
     * 
     */
    @Import(name="ignoreAbsentFields")
    private @Nullable Output<Boolean> ignoreAbsentFields;

    /**
     * @return When reading, disregard fields not present in data_json
     * 
     */
    public Optional<Output<Boolean>> ignoreAbsentFields() {
        return Optional.ofNullable(this.ignoreAbsentFields);
    }

    /**
     * The full logical path at which to write the given
     * data. Consult each backend&#39;s documentation to see which endpoints
     * support the `PUT` methods and to determine whether they also support
     * `DELETE` and `GET`.
     * 
     */
    @Import(name="path")
    private @Nullable Output<String> path;

    /**
     * @return The full logical path at which to write the given
     * data. Consult each backend&#39;s documentation to see which endpoints
     * support the `PUT` methods and to determine whether they also support
     * `DELETE` and `GET`.
     * 
     */
    public Optional<Output<String>> path() {
        return Optional.ofNullable(this.path);
    }

    /**
     * Map of strings returned by write operation
     * 
     */
    @Import(name="writeData")
    private @Nullable Output<Map<String,String>> writeData;

    /**
     * @return Map of strings returned by write operation
     * 
     */
    public Optional<Output<Map<String,String>>> writeData() {
        return Optional.ofNullable(this.writeData);
    }

    /**
     * JSON data returned by write operation
     * 
     */
    @Import(name="writeDataJson")
    private @Nullable Output<String> writeDataJson;

    /**
     * @return JSON data returned by write operation
     * 
     */
    public Optional<Output<String>> writeDataJson() {
        return Optional.ofNullable(this.writeDataJson);
    }

    /**
     * Top-level fields returned by write to persist in state
     * 
     */
    @Import(name="writeFields")
    private @Nullable Output<List<String>> writeFields;

    /**
     * @return Top-level fields returned by write to persist in state
     * 
     */
    public Optional<Output<List<String>>> writeFields() {
        return Optional.ofNullable(this.writeFields);
    }

    private EndpointState() {}

    private EndpointState(EndpointState $) {
        this.dataJson = $.dataJson;
        this.disableDelete = $.disableDelete;
        this.disableRead = $.disableRead;
        this.ignoreAbsentFields = $.ignoreAbsentFields;
        this.path = $.path;
        this.writeData = $.writeData;
        this.writeDataJson = $.writeDataJson;
        this.writeFields = $.writeFields;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EndpointState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EndpointState $;

        public Builder() {
            $ = new EndpointState();
        }

        public Builder(EndpointState defaults) {
            $ = new EndpointState(Objects.requireNonNull(defaults));
        }

        /**
         * @param dataJson String containing a JSON-encoded object that will be
         * written to the given path as the secret data.
         * 
         * @return builder
         * 
         */
        public Builder dataJson(@Nullable Output<String> dataJson) {
            $.dataJson = dataJson;
            return this;
        }

        /**
         * @param dataJson String containing a JSON-encoded object that will be
         * written to the given path as the secret data.
         * 
         * @return builder
         * 
         */
        public Builder dataJson(String dataJson) {
            return dataJson(Output.of(dataJson));
        }

        /**
         * @param disableDelete Don&#39;t attempt to delete the path from Vault if true
         * 
         * @return builder
         * 
         */
        public Builder disableDelete(@Nullable Output<Boolean> disableDelete) {
            $.disableDelete = disableDelete;
            return this;
        }

        /**
         * @param disableDelete Don&#39;t attempt to delete the path from Vault if true
         * 
         * @return builder
         * 
         */
        public Builder disableDelete(Boolean disableDelete) {
            return disableDelete(Output.of(disableDelete));
        }

        /**
         * @param disableRead True/false. Set this to true if your vault
         * authentication is not able to read the data or if the endpoint does
         * not support the `GET` method. Setting this to `true` will break drift
         * detection. You should set this to `true` for endpoints that are
         * write-only. Defaults to false.
         * 
         * @return builder
         * 
         */
        public Builder disableRead(@Nullable Output<Boolean> disableRead) {
            $.disableRead = disableRead;
            return this;
        }

        /**
         * @param disableRead True/false. Set this to true if your vault
         * authentication is not able to read the data or if the endpoint does
         * not support the `GET` method. Setting this to `true` will break drift
         * detection. You should set this to `true` for endpoints that are
         * write-only. Defaults to false.
         * 
         * @return builder
         * 
         */
        public Builder disableRead(Boolean disableRead) {
            return disableRead(Output.of(disableRead));
        }

        /**
         * @param ignoreAbsentFields When reading, disregard fields not present in data_json
         * 
         * @return builder
         * 
         */
        public Builder ignoreAbsentFields(@Nullable Output<Boolean> ignoreAbsentFields) {
            $.ignoreAbsentFields = ignoreAbsentFields;
            return this;
        }

        /**
         * @param ignoreAbsentFields When reading, disregard fields not present in data_json
         * 
         * @return builder
         * 
         */
        public Builder ignoreAbsentFields(Boolean ignoreAbsentFields) {
            return ignoreAbsentFields(Output.of(ignoreAbsentFields));
        }

        /**
         * @param path The full logical path at which to write the given
         * data. Consult each backend&#39;s documentation to see which endpoints
         * support the `PUT` methods and to determine whether they also support
         * `DELETE` and `GET`.
         * 
         * @return builder
         * 
         */
        public Builder path(@Nullable Output<String> path) {
            $.path = path;
            return this;
        }

        /**
         * @param path The full logical path at which to write the given
         * data. Consult each backend&#39;s documentation to see which endpoints
         * support the `PUT` methods and to determine whether they also support
         * `DELETE` and `GET`.
         * 
         * @return builder
         * 
         */
        public Builder path(String path) {
            return path(Output.of(path));
        }

        /**
         * @param writeData Map of strings returned by write operation
         * 
         * @return builder
         * 
         */
        public Builder writeData(@Nullable Output<Map<String,String>> writeData) {
            $.writeData = writeData;
            return this;
        }

        /**
         * @param writeData Map of strings returned by write operation
         * 
         * @return builder
         * 
         */
        public Builder writeData(Map<String,String> writeData) {
            return writeData(Output.of(writeData));
        }

        /**
         * @param writeDataJson JSON data returned by write operation
         * 
         * @return builder
         * 
         */
        public Builder writeDataJson(@Nullable Output<String> writeDataJson) {
            $.writeDataJson = writeDataJson;
            return this;
        }

        /**
         * @param writeDataJson JSON data returned by write operation
         * 
         * @return builder
         * 
         */
        public Builder writeDataJson(String writeDataJson) {
            return writeDataJson(Output.of(writeDataJson));
        }

        /**
         * @param writeFields Top-level fields returned by write to persist in state
         * 
         * @return builder
         * 
         */
        public Builder writeFields(@Nullable Output<List<String>> writeFields) {
            $.writeFields = writeFields;
            return this;
        }

        /**
         * @param writeFields Top-level fields returned by write to persist in state
         * 
         * @return builder
         * 
         */
        public Builder writeFields(List<String> writeFields) {
            return writeFields(Output.of(writeFields));
        }

        /**
         * @param writeFields Top-level fields returned by write to persist in state
         * 
         * @return builder
         * 
         */
        public Builder writeFields(String... writeFields) {
            return writeFields(List.of(writeFields));
        }

        public EndpointState build() {
            return $;
        }
    }

}
