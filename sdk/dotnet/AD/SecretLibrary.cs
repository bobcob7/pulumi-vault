// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vault.AD
{
    [VaultResourceType("vault:ad/secretLibrary:SecretLibrary")]
    public partial class SecretLibrary : Pulumi.CustomResource
    {
        /// <summary>
        /// The mount path for the AD backend.
        /// </summary>
        [Output("backend")]
        public Output<string> Backend { get; private set; } = null!;

        /// <summary>
        /// Disable enforcing that service accounts must be checked in by the entity or client token that checked them out.
        /// </summary>
        [Output("disableCheckInEnforcement")]
        public Output<bool?> DisableCheckInEnforcement { get; private set; } = null!;

        /// <summary>
        /// The maximum amount of time, in seconds, a check-out last with renewal before Vault automatically checks it back in.
        /// </summary>
        [Output("maxTtl")]
        public Output<int> MaxTtl { get; private set; } = null!;

        /// <summary>
        /// The name of the set of service accounts.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The names of all the service accounts that can be checked out from this set. These service accounts must already exist
        /// in Active Directory.
        /// </summary>
        [Output("serviceAccountNames")]
        public Output<ImmutableArray<string>> ServiceAccountNames { get; private set; } = null!;

        /// <summary>
        /// The amount of time, in seconds, a single check-out lasts before Vault automatically checks it back in.
        /// </summary>
        [Output("ttl")]
        public Output<int> Ttl { get; private set; } = null!;


        /// <summary>
        /// Create a SecretLibrary resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SecretLibrary(string name, SecretLibraryArgs args, CustomResourceOptions? options = null)
            : base("vault:ad/secretLibrary:SecretLibrary", name, args ?? new SecretLibraryArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SecretLibrary(string name, Input<string> id, SecretLibraryState? state = null, CustomResourceOptions? options = null)
            : base("vault:ad/secretLibrary:SecretLibrary", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SecretLibrary resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SecretLibrary Get(string name, Input<string> id, SecretLibraryState? state = null, CustomResourceOptions? options = null)
        {
            return new SecretLibrary(name, id, state, options);
        }
    }

    public sealed class SecretLibraryArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The mount path for the AD backend.
        /// </summary>
        [Input("backend", required: true)]
        public Input<string> Backend { get; set; } = null!;

        /// <summary>
        /// Disable enforcing that service accounts must be checked in by the entity or client token that checked them out.
        /// </summary>
        [Input("disableCheckInEnforcement")]
        public Input<bool>? DisableCheckInEnforcement { get; set; }

        /// <summary>
        /// The maximum amount of time, in seconds, a check-out last with renewal before Vault automatically checks it back in.
        /// </summary>
        [Input("maxTtl")]
        public Input<int>? MaxTtl { get; set; }

        /// <summary>
        /// The name of the set of service accounts.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("serviceAccountNames", required: true)]
        private InputList<string>? _serviceAccountNames;

        /// <summary>
        /// The names of all the service accounts that can be checked out from this set. These service accounts must already exist
        /// in Active Directory.
        /// </summary>
        public InputList<string> ServiceAccountNames
        {
            get => _serviceAccountNames ?? (_serviceAccountNames = new InputList<string>());
            set => _serviceAccountNames = value;
        }

        /// <summary>
        /// The amount of time, in seconds, a single check-out lasts before Vault automatically checks it back in.
        /// </summary>
        [Input("ttl")]
        public Input<int>? Ttl { get; set; }

        public SecretLibraryArgs()
        {
        }
    }

    public sealed class SecretLibraryState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The mount path for the AD backend.
        /// </summary>
        [Input("backend")]
        public Input<string>? Backend { get; set; }

        /// <summary>
        /// Disable enforcing that service accounts must be checked in by the entity or client token that checked them out.
        /// </summary>
        [Input("disableCheckInEnforcement")]
        public Input<bool>? DisableCheckInEnforcement { get; set; }

        /// <summary>
        /// The maximum amount of time, in seconds, a check-out last with renewal before Vault automatically checks it back in.
        /// </summary>
        [Input("maxTtl")]
        public Input<int>? MaxTtl { get; set; }

        /// <summary>
        /// The name of the set of service accounts.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("serviceAccountNames")]
        private InputList<string>? _serviceAccountNames;

        /// <summary>
        /// The names of all the service accounts that can be checked out from this set. These service accounts must already exist
        /// in Active Directory.
        /// </summary>
        public InputList<string> ServiceAccountNames
        {
            get => _serviceAccountNames ?? (_serviceAccountNames = new InputList<string>());
            set => _serviceAccountNames = value;
        }

        /// <summary>
        /// The amount of time, in seconds, a single check-out lasts before Vault automatically checks it back in.
        /// </summary>
        [Input("ttl")]
        public Input<int>? Ttl { get; set; }

        public SecretLibraryState()
        {
        }
    }
}
