// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vault.Kubernetes
{
    public static class GetServiceAccountToken
    {
        public static Task<GetServiceAccountTokenResult> InvokeAsync(GetServiceAccountTokenArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetServiceAccountTokenResult>("vault:kubernetes/getServiceAccountToken:getServiceAccountToken", args ?? new GetServiceAccountTokenArgs(), options.WithDefaults());

        public static Output<GetServiceAccountTokenResult> Invoke(GetServiceAccountTokenInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetServiceAccountTokenResult>("vault:kubernetes/getServiceAccountToken:getServiceAccountToken", args ?? new GetServiceAccountTokenInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetServiceAccountTokenArgs : global::Pulumi.InvokeArgs
    {
        [Input("backend", required: true)]
        public string Backend { get; set; } = null!;

        [Input("clusterRoleBinding")]
        public bool? ClusterRoleBinding { get; set; }

        [Input("kubernetesNamespace", required: true)]
        public string KubernetesNamespace { get; set; } = null!;

        [Input("namespace")]
        public string? Namespace { get; set; }

        [Input("role", required: true)]
        public string Role { get; set; } = null!;

        [Input("ttl")]
        public string? Ttl { get; set; }

        public GetServiceAccountTokenArgs()
        {
        }
        public static new GetServiceAccountTokenArgs Empty => new GetServiceAccountTokenArgs();
    }

    public sealed class GetServiceAccountTokenInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("backend", required: true)]
        public Input<string> Backend { get; set; } = null!;

        [Input("clusterRoleBinding")]
        public Input<bool>? ClusterRoleBinding { get; set; }

        [Input("kubernetesNamespace", required: true)]
        public Input<string> KubernetesNamespace { get; set; } = null!;

        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        [Input("role", required: true)]
        public Input<string> Role { get; set; } = null!;

        [Input("ttl")]
        public Input<string>? Ttl { get; set; }

        public GetServiceAccountTokenInvokeArgs()
        {
        }
        public static new GetServiceAccountTokenInvokeArgs Empty => new GetServiceAccountTokenInvokeArgs();
    }


    [OutputType]
    public sealed class GetServiceAccountTokenResult
    {
        public readonly string Backend;
        public readonly bool? ClusterRoleBinding;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string KubernetesNamespace;
        public readonly int LeaseDuration;
        public readonly string LeaseId;
        public readonly bool LeaseRenewable;
        public readonly string? Namespace;
        public readonly string Role;
        public readonly string ServiceAccountName;
        public readonly string ServiceAccountNamespace;
        public readonly string ServiceAccountToken;
        public readonly string? Ttl;

        [OutputConstructor]
        private GetServiceAccountTokenResult(
            string backend,

            bool? clusterRoleBinding,

            string id,

            string kubernetesNamespace,

            int leaseDuration,

            string leaseId,

            bool leaseRenewable,

            string? @namespace,

            string role,

            string serviceAccountName,

            string serviceAccountNamespace,

            string serviceAccountToken,

            string? ttl)
        {
            Backend = backend;
            ClusterRoleBinding = clusterRoleBinding;
            Id = id;
            KubernetesNamespace = kubernetesNamespace;
            LeaseDuration = leaseDuration;
            LeaseId = leaseId;
            LeaseRenewable = leaseRenewable;
            Namespace = @namespace;
            Role = role;
            ServiceAccountName = serviceAccountName;
            ServiceAccountNamespace = serviceAccountNamespace;
            ServiceAccountToken = serviceAccountToken;
            Ttl = ttl;
        }
    }
}
