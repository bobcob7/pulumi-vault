// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package vault

import (
	"fmt"

	"github.com/blang/semver"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type module struct {
	version semver.Version
}

func (m *module) Version() semver.Version {
	return m.version
}

func (m *module) Construct(ctx *pulumi.Context, name, typ, urn string) (r pulumi.Resource, err error) {
	switch typ {
	case "vault:index/audit:Audit":
		r, err = NewAudit(ctx, name, nil, pulumi.URN_(urn))
	case "vault:index/authBackend:AuthBackend":
		r, err = NewAuthBackend(ctx, name, nil, pulumi.URN_(urn))
	case "vault:index/certAuthBackendRole:CertAuthBackendRole":
		r, err = NewCertAuthBackendRole(ctx, name, nil, pulumi.URN_(urn))
	case "vault:index/egpPolicy:EgpPolicy":
		r, err = NewEgpPolicy(ctx, name, nil, pulumi.URN_(urn))
	case "vault:index/mfaDuo:MfaDuo":
		r, err = NewMfaDuo(ctx, name, nil, pulumi.URN_(urn))
	case "vault:index/mount:Mount":
		r, err = NewMount(ctx, name, nil, pulumi.URN_(urn))
	case "vault:index/namespace:Namespace":
		r, err = NewNamespace(ctx, name, nil, pulumi.URN_(urn))
	case "vault:index/nomadSecretBackend:NomadSecretBackend":
		r, err = NewNomadSecretBackend(ctx, name, nil, pulumi.URN_(urn))
	case "vault:index/nomadSecretRole:NomadSecretRole":
		r, err = NewNomadSecretRole(ctx, name, nil, pulumi.URN_(urn))
	case "vault:index/passwordPolicy:PasswordPolicy":
		r, err = NewPasswordPolicy(ctx, name, nil, pulumi.URN_(urn))
	case "vault:index/policy:Policy":
		r, err = NewPolicy(ctx, name, nil, pulumi.URN_(urn))
	case "vault:index/quotaRateLimit:QuotaRateLimit":
		r, err = NewQuotaRateLimit(ctx, name, nil, pulumi.URN_(urn))
	case "vault:index/rgpPolicy:RgpPolicy":
		r, err = NewRgpPolicy(ctx, name, nil, pulumi.URN_(urn))
	case "vault:index/token:Token":
		r, err = NewToken(ctx, name, nil, pulumi.URN_(urn))
	default:
		return nil, fmt.Errorf("unknown resource type: %s", typ)
	}

	return
}

type pkg struct {
	version semver.Version
}

func (p *pkg) Version() semver.Version {
	return p.version
}

func (p *pkg) ConstructProvider(ctx *pulumi.Context, name, typ, urn string) (pulumi.ProviderResource, error) {
	if typ != "pulumi:providers:vault" {
		return nil, fmt.Errorf("unknown provider type: %s", typ)
	}

	return NewProvider(ctx, name, nil, pulumi.URN_(urn))
}

func init() {
	version, err := PkgVersion()
	if err != nil {
		fmt.Println("failed to determine package version. defaulting to v1: %v", err)
	}
	pulumi.RegisterResourceModule(
		"vault",
		"index/audit",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vault",
		"index/authBackend",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vault",
		"index/certAuthBackendRole",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vault",
		"index/egpPolicy",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vault",
		"index/mfaDuo",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vault",
		"index/mount",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vault",
		"index/namespace",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vault",
		"index/nomadSecretBackend",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vault",
		"index/nomadSecretRole",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vault",
		"index/passwordPolicy",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vault",
		"index/policy",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vault",
		"index/quotaRateLimit",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vault",
		"index/rgpPolicy",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vault",
		"index/token",
		&module{version},
	)
	pulumi.RegisterResourcePackage(
		"vault",
		&pkg{version},
	)
}
