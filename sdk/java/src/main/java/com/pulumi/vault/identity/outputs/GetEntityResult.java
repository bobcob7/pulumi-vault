// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault.identity.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.vault.identity.outputs.GetEntityAlias;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetEntityResult {
    private final String aliasId;
    private final String aliasMountAccessor;
    private final String aliasName;
    /**
     * @return A list of entity alias. Structure is documented below.
     * 
     */
    private final List<GetEntityAlias> aliases;
    /**
     * @return Creation time of the Alias
     * 
     */
    private final String creationTime;
    /**
     * @return A string containing the full data payload retrieved from
     * Vault, serialized in JSON format.
     * 
     */
    private final String dataJson;
    /**
     * @return List of Group IDs of which the entity is directly a member of
     * 
     */
    private final List<String> directGroupIds;
    /**
     * @return Whether the entity is disabled
     * 
     */
    private final Boolean disabled;
    private final String entityId;
    private final String entityName;
    /**
     * @return List of all Group IDs of which the entity is a member of
     * 
     */
    private final List<String> groupIds;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private final String id;
    /**
     * @return List of all Group IDs of which the entity is a member of transitively
     * 
     */
    private final List<String> inheritedGroupIds;
    /**
     * @return Last update time of the alias
     * 
     */
    private final String lastUpdateTime;
    /**
     * @return Other entity IDs which is merged with this entity
     * 
     */
    private final List<String> mergedEntityIds;
    /**
     * @return Arbitrary metadata
     * 
     */
    private final Map<String,Object> metadata;
    /**
     * @return Namespace of which the entity is part of
     * 
     */
    private final String namespaceId;
    /**
     * @return List of policies attached to the entity
     * 
     */
    private final List<String> policies;

    @CustomType.Constructor
    private GetEntityResult(
        @CustomType.Parameter("aliasId") String aliasId,
        @CustomType.Parameter("aliasMountAccessor") String aliasMountAccessor,
        @CustomType.Parameter("aliasName") String aliasName,
        @CustomType.Parameter("aliases") List<GetEntityAlias> aliases,
        @CustomType.Parameter("creationTime") String creationTime,
        @CustomType.Parameter("dataJson") String dataJson,
        @CustomType.Parameter("directGroupIds") List<String> directGroupIds,
        @CustomType.Parameter("disabled") Boolean disabled,
        @CustomType.Parameter("entityId") String entityId,
        @CustomType.Parameter("entityName") String entityName,
        @CustomType.Parameter("groupIds") List<String> groupIds,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("inheritedGroupIds") List<String> inheritedGroupIds,
        @CustomType.Parameter("lastUpdateTime") String lastUpdateTime,
        @CustomType.Parameter("mergedEntityIds") List<String> mergedEntityIds,
        @CustomType.Parameter("metadata") Map<String,Object> metadata,
        @CustomType.Parameter("namespaceId") String namespaceId,
        @CustomType.Parameter("policies") List<String> policies) {
        this.aliasId = aliasId;
        this.aliasMountAccessor = aliasMountAccessor;
        this.aliasName = aliasName;
        this.aliases = aliases;
        this.creationTime = creationTime;
        this.dataJson = dataJson;
        this.directGroupIds = directGroupIds;
        this.disabled = disabled;
        this.entityId = entityId;
        this.entityName = entityName;
        this.groupIds = groupIds;
        this.id = id;
        this.inheritedGroupIds = inheritedGroupIds;
        this.lastUpdateTime = lastUpdateTime;
        this.mergedEntityIds = mergedEntityIds;
        this.metadata = metadata;
        this.namespaceId = namespaceId;
        this.policies = policies;
    }

    public String aliasId() {
        return this.aliasId;
    }
    public String aliasMountAccessor() {
        return this.aliasMountAccessor;
    }
    public String aliasName() {
        return this.aliasName;
    }
    /**
     * @return A list of entity alias. Structure is documented below.
     * 
     */
    public List<GetEntityAlias> aliases() {
        return this.aliases;
    }
    /**
     * @return Creation time of the Alias
     * 
     */
    public String creationTime() {
        return this.creationTime;
    }
    /**
     * @return A string containing the full data payload retrieved from
     * Vault, serialized in JSON format.
     * 
     */
    public String dataJson() {
        return this.dataJson;
    }
    /**
     * @return List of Group IDs of which the entity is directly a member of
     * 
     */
    public List<String> directGroupIds() {
        return this.directGroupIds;
    }
    /**
     * @return Whether the entity is disabled
     * 
     */
    public Boolean disabled() {
        return this.disabled;
    }
    public String entityId() {
        return this.entityId;
    }
    public String entityName() {
        return this.entityName;
    }
    /**
     * @return List of all Group IDs of which the entity is a member of
     * 
     */
    public List<String> groupIds() {
        return this.groupIds;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return List of all Group IDs of which the entity is a member of transitively
     * 
     */
    public List<String> inheritedGroupIds() {
        return this.inheritedGroupIds;
    }
    /**
     * @return Last update time of the alias
     * 
     */
    public String lastUpdateTime() {
        return this.lastUpdateTime;
    }
    /**
     * @return Other entity IDs which is merged with this entity
     * 
     */
    public List<String> mergedEntityIds() {
        return this.mergedEntityIds;
    }
    /**
     * @return Arbitrary metadata
     * 
     */
    public Map<String,Object> metadata() {
        return this.metadata;
    }
    /**
     * @return Namespace of which the entity is part of
     * 
     */
    public String namespaceId() {
        return this.namespaceId;
    }
    /**
     * @return List of policies attached to the entity
     * 
     */
    public List<String> policies() {
        return this.policies;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetEntityResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String aliasId;
        private String aliasMountAccessor;
        private String aliasName;
        private List<GetEntityAlias> aliases;
        private String creationTime;
        private String dataJson;
        private List<String> directGroupIds;
        private Boolean disabled;
        private String entityId;
        private String entityName;
        private List<String> groupIds;
        private String id;
        private List<String> inheritedGroupIds;
        private String lastUpdateTime;
        private List<String> mergedEntityIds;
        private Map<String,Object> metadata;
        private String namespaceId;
        private List<String> policies;

        public Builder() {
    	      // Empty
        }

        public Builder(GetEntityResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.aliasId = defaults.aliasId;
    	      this.aliasMountAccessor = defaults.aliasMountAccessor;
    	      this.aliasName = defaults.aliasName;
    	      this.aliases = defaults.aliases;
    	      this.creationTime = defaults.creationTime;
    	      this.dataJson = defaults.dataJson;
    	      this.directGroupIds = defaults.directGroupIds;
    	      this.disabled = defaults.disabled;
    	      this.entityId = defaults.entityId;
    	      this.entityName = defaults.entityName;
    	      this.groupIds = defaults.groupIds;
    	      this.id = defaults.id;
    	      this.inheritedGroupIds = defaults.inheritedGroupIds;
    	      this.lastUpdateTime = defaults.lastUpdateTime;
    	      this.mergedEntityIds = defaults.mergedEntityIds;
    	      this.metadata = defaults.metadata;
    	      this.namespaceId = defaults.namespaceId;
    	      this.policies = defaults.policies;
        }

        public Builder aliasId(String aliasId) {
            this.aliasId = Objects.requireNonNull(aliasId);
            return this;
        }
        public Builder aliasMountAccessor(String aliasMountAccessor) {
            this.aliasMountAccessor = Objects.requireNonNull(aliasMountAccessor);
            return this;
        }
        public Builder aliasName(String aliasName) {
            this.aliasName = Objects.requireNonNull(aliasName);
            return this;
        }
        public Builder aliases(List<GetEntityAlias> aliases) {
            this.aliases = Objects.requireNonNull(aliases);
            return this;
        }
        public Builder aliases(GetEntityAlias... aliases) {
            return aliases(List.of(aliases));
        }
        public Builder creationTime(String creationTime) {
            this.creationTime = Objects.requireNonNull(creationTime);
            return this;
        }
        public Builder dataJson(String dataJson) {
            this.dataJson = Objects.requireNonNull(dataJson);
            return this;
        }
        public Builder directGroupIds(List<String> directGroupIds) {
            this.directGroupIds = Objects.requireNonNull(directGroupIds);
            return this;
        }
        public Builder directGroupIds(String... directGroupIds) {
            return directGroupIds(List.of(directGroupIds));
        }
        public Builder disabled(Boolean disabled) {
            this.disabled = Objects.requireNonNull(disabled);
            return this;
        }
        public Builder entityId(String entityId) {
            this.entityId = Objects.requireNonNull(entityId);
            return this;
        }
        public Builder entityName(String entityName) {
            this.entityName = Objects.requireNonNull(entityName);
            return this;
        }
        public Builder groupIds(List<String> groupIds) {
            this.groupIds = Objects.requireNonNull(groupIds);
            return this;
        }
        public Builder groupIds(String... groupIds) {
            return groupIds(List.of(groupIds));
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder inheritedGroupIds(List<String> inheritedGroupIds) {
            this.inheritedGroupIds = Objects.requireNonNull(inheritedGroupIds);
            return this;
        }
        public Builder inheritedGroupIds(String... inheritedGroupIds) {
            return inheritedGroupIds(List.of(inheritedGroupIds));
        }
        public Builder lastUpdateTime(String lastUpdateTime) {
            this.lastUpdateTime = Objects.requireNonNull(lastUpdateTime);
            return this;
        }
        public Builder mergedEntityIds(List<String> mergedEntityIds) {
            this.mergedEntityIds = Objects.requireNonNull(mergedEntityIds);
            return this;
        }
        public Builder mergedEntityIds(String... mergedEntityIds) {
            return mergedEntityIds(List.of(mergedEntityIds));
        }
        public Builder metadata(Map<String,Object> metadata) {
            this.metadata = Objects.requireNonNull(metadata);
            return this;
        }
        public Builder namespaceId(String namespaceId) {
            this.namespaceId = Objects.requireNonNull(namespaceId);
            return this;
        }
        public Builder policies(List<String> policies) {
            this.policies = Objects.requireNonNull(policies);
            return this;
        }
        public Builder policies(String... policies) {
            return policies(List.of(policies));
        }        public GetEntityResult build() {
            return new GetEntityResult(aliasId, aliasMountAccessor, aliasName, aliases, creationTime, dataJson, directGroupIds, disabled, entityId, entityName, groupIds, id, inheritedGroupIds, lastUpdateTime, mergedEntityIds, metadata, namespaceId, policies);
        }
    }
}
