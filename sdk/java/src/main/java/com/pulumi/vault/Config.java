// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault;

import com.pulumi.core.TypeShape;
import com.pulumi.core.internal.Codegen;
import com.pulumi.vault.config.inputs.AuthLogins;
import com.pulumi.vault.config.inputs.ClientAuths;
import com.pulumi.vault.config.inputs.Headers;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;

public final class Config {

    private static final com.pulumi.Config config = com.pulumi.Config.of("vault");
/**
 * If true, adds the value of the `address` argument to the Terraform process environment.
 * 
 */
    public Optional<String> addAddressToEnv() {
        return Codegen.stringProp("addAddressToEnv").config(config).get();
    }
/**
 * URL of the root of the target Vault server.
 * 
 */
    public String address() {
        return Codegen.stringProp("address").config(config).require();
    }
/**
 * Login to vault with an existing auth method using auth/&lt;mount&gt;/login
 * 
 */
    public Optional<List<AuthLogins>> authLogins() {
        return Codegen.objectProp("authLogins", TypeShape.<List<AuthLogins>>builder(List.class).addParameter(AuthLogins.class).build()).config(config).get();
    }
/**
 * Path to directory containing CA certificate files to validate the server&#39;s certificate.
 * 
 */
    public Optional<String> caCertDir() {
        return Codegen.stringProp("caCertDir").config(config).get();
    }
/**
 * Path to a CA certificate file to validate the server&#39;s certificate.
 * 
 */
    public Optional<String> caCertFile() {
        return Codegen.stringProp("caCertFile").config(config).get();
    }
/**
 * Client authentication credentials.
 * 
 */
    public Optional<List<ClientAuths>> clientAuths() {
        return Codegen.objectProp("clientAuths", TypeShape.<List<ClientAuths>>builder(List.class).addParameter(ClientAuths.class).build()).config(config).get();
    }
/**
 * The headers to send with each Vault request.
 * 
 */
    public Optional<List<Headers>> headers() {
        return Codegen.objectProp("headers", TypeShape.<List<Headers>>builder(List.class).addParameter(Headers.class).build()).config(config).get();
    }
/**
 * Maximum TTL for secret leases requested by this provider.
 * 
 */
    public Optional<Integer> maxLeaseTtlSeconds() {
        return Codegen.integerProp("maxLeaseTtlSeconds").config(config).env("TERRAFORM_VAULT_MAX_TTL").def(1200).get();
    }
/**
 * Maximum number of retries when a 5xx error code is encountered.
 * 
 */
    public Optional<Integer> maxRetries() {
        return Codegen.integerProp("maxRetries").config(config).env("VAULT_MAX_RETRIES").def(2).get();
    }
/**
 * Maximum number of retries for Client Controlled Consistency related operations
 * 
 */
    public Optional<Integer> maxRetriesCcc() {
        return Codegen.integerProp("maxRetriesCcc").config(config).get();
    }
/**
 * The namespace to use. Available only for Vault Enterprise.
 * 
 */
    public Optional<String> namespace() {
        return Codegen.stringProp("namespace").config(config).get();
    }
/**
 * Set this to true to prevent the creation of ephemeral child token used by this provider.
 * 
 */
    public Optional<Boolean> skipChildToken() {
        return Codegen.booleanProp("skipChildToken").config(config).get();
    }
/**
 * Set this to true only if the target Vault server is an insecure development instance.
 * 
 */
    public Optional<Boolean> skipTlsVerify() {
        return Codegen.booleanProp("skipTlsVerify").config(config).env("VAULT_SKIP_VERIFY").get();
    }
/**
 * Name to use as the SNI host when connecting via TLS.
 * 
 */
    public Optional<String> tlsServerName() {
        return Codegen.stringProp("tlsServerName").config(config).get();
    }
/**
 * Token to use to authenticate to Vault.
 * 
 */
    public String token() {
        return Codegen.stringProp("token").config(config).require();
    }
/**
 * Token name to use for creating the Vault child token.
 * 
 */
    public Optional<String> tokenName() {
        return Codegen.stringProp("tokenName").config(config).get();
    }
}
