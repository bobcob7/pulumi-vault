// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package identity

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for configuring the pingid MFA method.
//
// ## Import
//
// Resource can be imported using its `uuid` field, e.g.
//
// ```sh
//
//	$ pulumi import vault:identity/mfaPingID:MfaPingID example 0d89c36a-4ff5-4d70-8749-bb6a5598aeec
//
// ```
type MfaPingID struct {
	pulumi.CustomResourceState

	// The admin URL, derived from "settingsFileBase64"
	AdminUrl pulumi.StringOutput `pulumi:"adminUrl"`
	// A unique identifier of the organization, derived from "settingsFileBase64"
	AuthenticatorUrl pulumi.StringOutput `pulumi:"authenticatorUrl"`
	// The IDP URL, derived from "settingsFileBase64"
	IdpUrl pulumi.StringOutput `pulumi:"idpUrl"`
	// Method ID.
	MethodId pulumi.StringOutput `pulumi:"methodId"`
	// Mount accessor.
	MountAccessor pulumi.StringOutput `pulumi:"mountAccessor"`
	// Method name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Target namespace. (requires Enterprise)
	Namespace pulumi.StringPtrOutput `pulumi:"namespace"`
	// Method's namespace ID.
	NamespaceId pulumi.StringOutput `pulumi:"namespaceId"`
	// Method's namespace path.
	NamespacePath pulumi.StringOutput `pulumi:"namespacePath"`
	// The name of the PingID client organization, derived from "settingsFileBase64"
	OrgAlias pulumi.StringOutput `pulumi:"orgAlias"`
	// A base64-encoded third-party settings contents as retrieved from PingID's configuration page.
	SettingsFileBase64 pulumi.StringOutput `pulumi:"settingsFileBase64"`
	// MFA type.
	Type pulumi.StringOutput `pulumi:"type"`
	// Use signature value, derived from "settingsFileBase64"
	UseSignature pulumi.BoolOutput `pulumi:"useSignature"`
	// A template string for mapping Identity names to MFA methods.
	UsernameFormat pulumi.StringPtrOutput `pulumi:"usernameFormat"`
	// Resource UUID.
	Uuid pulumi.StringOutput `pulumi:"uuid"`
}

// NewMfaPingID registers a new resource with the given unique name, arguments, and options.
func NewMfaPingID(ctx *pulumi.Context,
	name string, args *MfaPingIDArgs, opts ...pulumi.ResourceOption) (*MfaPingID, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SettingsFileBase64 == nil {
		return nil, errors.New("invalid value for required argument 'SettingsFileBase64'")
	}
	var resource MfaPingID
	err := ctx.RegisterResource("vault:identity/mfaPingID:MfaPingID", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMfaPingID gets an existing MfaPingID resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMfaPingID(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MfaPingIDState, opts ...pulumi.ResourceOption) (*MfaPingID, error) {
	var resource MfaPingID
	err := ctx.ReadResource("vault:identity/mfaPingID:MfaPingID", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MfaPingID resources.
type mfaPingIDState struct {
	// The admin URL, derived from "settingsFileBase64"
	AdminUrl *string `pulumi:"adminUrl"`
	// A unique identifier of the organization, derived from "settingsFileBase64"
	AuthenticatorUrl *string `pulumi:"authenticatorUrl"`
	// The IDP URL, derived from "settingsFileBase64"
	IdpUrl *string `pulumi:"idpUrl"`
	// Method ID.
	MethodId *string `pulumi:"methodId"`
	// Mount accessor.
	MountAccessor *string `pulumi:"mountAccessor"`
	// Method name.
	Name *string `pulumi:"name"`
	// Target namespace. (requires Enterprise)
	Namespace *string `pulumi:"namespace"`
	// Method's namespace ID.
	NamespaceId *string `pulumi:"namespaceId"`
	// Method's namespace path.
	NamespacePath *string `pulumi:"namespacePath"`
	// The name of the PingID client organization, derived from "settingsFileBase64"
	OrgAlias *string `pulumi:"orgAlias"`
	// A base64-encoded third-party settings contents as retrieved from PingID's configuration page.
	SettingsFileBase64 *string `pulumi:"settingsFileBase64"`
	// MFA type.
	Type *string `pulumi:"type"`
	// Use signature value, derived from "settingsFileBase64"
	UseSignature *bool `pulumi:"useSignature"`
	// A template string for mapping Identity names to MFA methods.
	UsernameFormat *string `pulumi:"usernameFormat"`
	// Resource UUID.
	Uuid *string `pulumi:"uuid"`
}

type MfaPingIDState struct {
	// The admin URL, derived from "settingsFileBase64"
	AdminUrl pulumi.StringPtrInput
	// A unique identifier of the organization, derived from "settingsFileBase64"
	AuthenticatorUrl pulumi.StringPtrInput
	// The IDP URL, derived from "settingsFileBase64"
	IdpUrl pulumi.StringPtrInput
	// Method ID.
	MethodId pulumi.StringPtrInput
	// Mount accessor.
	MountAccessor pulumi.StringPtrInput
	// Method name.
	Name pulumi.StringPtrInput
	// Target namespace. (requires Enterprise)
	Namespace pulumi.StringPtrInput
	// Method's namespace ID.
	NamespaceId pulumi.StringPtrInput
	// Method's namespace path.
	NamespacePath pulumi.StringPtrInput
	// The name of the PingID client organization, derived from "settingsFileBase64"
	OrgAlias pulumi.StringPtrInput
	// A base64-encoded third-party settings contents as retrieved from PingID's configuration page.
	SettingsFileBase64 pulumi.StringPtrInput
	// MFA type.
	Type pulumi.StringPtrInput
	// Use signature value, derived from "settingsFileBase64"
	UseSignature pulumi.BoolPtrInput
	// A template string for mapping Identity names to MFA methods.
	UsernameFormat pulumi.StringPtrInput
	// Resource UUID.
	Uuid pulumi.StringPtrInput
}

func (MfaPingIDState) ElementType() reflect.Type {
	return reflect.TypeOf((*mfaPingIDState)(nil)).Elem()
}

type mfaPingIDArgs struct {
	// Target namespace. (requires Enterprise)
	Namespace *string `pulumi:"namespace"`
	// A base64-encoded third-party settings contents as retrieved from PingID's configuration page.
	SettingsFileBase64 string `pulumi:"settingsFileBase64"`
	// A template string for mapping Identity names to MFA methods.
	UsernameFormat *string `pulumi:"usernameFormat"`
}

// The set of arguments for constructing a MfaPingID resource.
type MfaPingIDArgs struct {
	// Target namespace. (requires Enterprise)
	Namespace pulumi.StringPtrInput
	// A base64-encoded third-party settings contents as retrieved from PingID's configuration page.
	SettingsFileBase64 pulumi.StringInput
	// A template string for mapping Identity names to MFA methods.
	UsernameFormat pulumi.StringPtrInput
}

func (MfaPingIDArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mfaPingIDArgs)(nil)).Elem()
}

type MfaPingIDInput interface {
	pulumi.Input

	ToMfaPingIDOutput() MfaPingIDOutput
	ToMfaPingIDOutputWithContext(ctx context.Context) MfaPingIDOutput
}

func (*MfaPingID) ElementType() reflect.Type {
	return reflect.TypeOf((**MfaPingID)(nil)).Elem()
}

func (i *MfaPingID) ToMfaPingIDOutput() MfaPingIDOutput {
	return i.ToMfaPingIDOutputWithContext(context.Background())
}

func (i *MfaPingID) ToMfaPingIDOutputWithContext(ctx context.Context) MfaPingIDOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MfaPingIDOutput)
}

// MfaPingIDArrayInput is an input type that accepts MfaPingIDArray and MfaPingIDArrayOutput values.
// You can construct a concrete instance of `MfaPingIDArrayInput` via:
//
//	MfaPingIDArray{ MfaPingIDArgs{...} }
type MfaPingIDArrayInput interface {
	pulumi.Input

	ToMfaPingIDArrayOutput() MfaPingIDArrayOutput
	ToMfaPingIDArrayOutputWithContext(context.Context) MfaPingIDArrayOutput
}

type MfaPingIDArray []MfaPingIDInput

func (MfaPingIDArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MfaPingID)(nil)).Elem()
}

func (i MfaPingIDArray) ToMfaPingIDArrayOutput() MfaPingIDArrayOutput {
	return i.ToMfaPingIDArrayOutputWithContext(context.Background())
}

func (i MfaPingIDArray) ToMfaPingIDArrayOutputWithContext(ctx context.Context) MfaPingIDArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MfaPingIDArrayOutput)
}

// MfaPingIDMapInput is an input type that accepts MfaPingIDMap and MfaPingIDMapOutput values.
// You can construct a concrete instance of `MfaPingIDMapInput` via:
//
//	MfaPingIDMap{ "key": MfaPingIDArgs{...} }
type MfaPingIDMapInput interface {
	pulumi.Input

	ToMfaPingIDMapOutput() MfaPingIDMapOutput
	ToMfaPingIDMapOutputWithContext(context.Context) MfaPingIDMapOutput
}

type MfaPingIDMap map[string]MfaPingIDInput

func (MfaPingIDMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MfaPingID)(nil)).Elem()
}

func (i MfaPingIDMap) ToMfaPingIDMapOutput() MfaPingIDMapOutput {
	return i.ToMfaPingIDMapOutputWithContext(context.Background())
}

func (i MfaPingIDMap) ToMfaPingIDMapOutputWithContext(ctx context.Context) MfaPingIDMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MfaPingIDMapOutput)
}

type MfaPingIDOutput struct{ *pulumi.OutputState }

func (MfaPingIDOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MfaPingID)(nil)).Elem()
}

func (o MfaPingIDOutput) ToMfaPingIDOutput() MfaPingIDOutput {
	return o
}

func (o MfaPingIDOutput) ToMfaPingIDOutputWithContext(ctx context.Context) MfaPingIDOutput {
	return o
}

// The admin URL, derived from "settingsFileBase64"
func (o MfaPingIDOutput) AdminUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *MfaPingID) pulumi.StringOutput { return v.AdminUrl }).(pulumi.StringOutput)
}

// A unique identifier of the organization, derived from "settingsFileBase64"
func (o MfaPingIDOutput) AuthenticatorUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *MfaPingID) pulumi.StringOutput { return v.AuthenticatorUrl }).(pulumi.StringOutput)
}

// The IDP URL, derived from "settingsFileBase64"
func (o MfaPingIDOutput) IdpUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *MfaPingID) pulumi.StringOutput { return v.IdpUrl }).(pulumi.StringOutput)
}

// Method ID.
func (o MfaPingIDOutput) MethodId() pulumi.StringOutput {
	return o.ApplyT(func(v *MfaPingID) pulumi.StringOutput { return v.MethodId }).(pulumi.StringOutput)
}

// Mount accessor.
func (o MfaPingIDOutput) MountAccessor() pulumi.StringOutput {
	return o.ApplyT(func(v *MfaPingID) pulumi.StringOutput { return v.MountAccessor }).(pulumi.StringOutput)
}

// Method name.
func (o MfaPingIDOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MfaPingID) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Target namespace. (requires Enterprise)
func (o MfaPingIDOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MfaPingID) pulumi.StringPtrOutput { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Method's namespace ID.
func (o MfaPingIDOutput) NamespaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *MfaPingID) pulumi.StringOutput { return v.NamespaceId }).(pulumi.StringOutput)
}

// Method's namespace path.
func (o MfaPingIDOutput) NamespacePath() pulumi.StringOutput {
	return o.ApplyT(func(v *MfaPingID) pulumi.StringOutput { return v.NamespacePath }).(pulumi.StringOutput)
}

// The name of the PingID client organization, derived from "settingsFileBase64"
func (o MfaPingIDOutput) OrgAlias() pulumi.StringOutput {
	return o.ApplyT(func(v *MfaPingID) pulumi.StringOutput { return v.OrgAlias }).(pulumi.StringOutput)
}

// A base64-encoded third-party settings contents as retrieved from PingID's configuration page.
func (o MfaPingIDOutput) SettingsFileBase64() pulumi.StringOutput {
	return o.ApplyT(func(v *MfaPingID) pulumi.StringOutput { return v.SettingsFileBase64 }).(pulumi.StringOutput)
}

// MFA type.
func (o MfaPingIDOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *MfaPingID) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Use signature value, derived from "settingsFileBase64"
func (o MfaPingIDOutput) UseSignature() pulumi.BoolOutput {
	return o.ApplyT(func(v *MfaPingID) pulumi.BoolOutput { return v.UseSignature }).(pulumi.BoolOutput)
}

// A template string for mapping Identity names to MFA methods.
func (o MfaPingIDOutput) UsernameFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MfaPingID) pulumi.StringPtrOutput { return v.UsernameFormat }).(pulumi.StringPtrOutput)
}

// Resource UUID.
func (o MfaPingIDOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v *MfaPingID) pulumi.StringOutput { return v.Uuid }).(pulumi.StringOutput)
}

type MfaPingIDArrayOutput struct{ *pulumi.OutputState }

func (MfaPingIDArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MfaPingID)(nil)).Elem()
}

func (o MfaPingIDArrayOutput) ToMfaPingIDArrayOutput() MfaPingIDArrayOutput {
	return o
}

func (o MfaPingIDArrayOutput) ToMfaPingIDArrayOutputWithContext(ctx context.Context) MfaPingIDArrayOutput {
	return o
}

func (o MfaPingIDArrayOutput) Index(i pulumi.IntInput) MfaPingIDOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MfaPingID {
		return vs[0].([]*MfaPingID)[vs[1].(int)]
	}).(MfaPingIDOutput)
}

type MfaPingIDMapOutput struct{ *pulumi.OutputState }

func (MfaPingIDMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MfaPingID)(nil)).Elem()
}

func (o MfaPingIDMapOutput) ToMfaPingIDMapOutput() MfaPingIDMapOutput {
	return o
}

func (o MfaPingIDMapOutput) ToMfaPingIDMapOutputWithContext(ctx context.Context) MfaPingIDMapOutput {
	return o
}

func (o MfaPingIDMapOutput) MapIndex(k pulumi.StringInput) MfaPingIDOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MfaPingID {
		return vs[0].(map[string]*MfaPingID)[vs[1].(string)]
	}).(MfaPingIDOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MfaPingIDInput)(nil)).Elem(), &MfaPingID{})
	pulumi.RegisterInputType(reflect.TypeOf((*MfaPingIDArrayInput)(nil)).Elem(), MfaPingIDArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MfaPingIDMapInput)(nil)).Elem(), MfaPingIDMap{})
	pulumi.RegisterOutputType(MfaPingIDOutput{})
	pulumi.RegisterOutputType(MfaPingIDArrayOutput{})
	pulumi.RegisterOutputType(MfaPingIDMapOutput{})
}
