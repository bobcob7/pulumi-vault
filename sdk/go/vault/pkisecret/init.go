// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package pkisecret

import (
	"fmt"

	"github.com/blang/semver"
	"github.com/pulumi/pulumi-vault/sdk/v3/go/vault"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type module struct {
	version semver.Version
}

func (m *module) Version() semver.Version {
	return m.version
}

func (m *module) Construct(ctx *pulumi.Context, name, typ, urn string) (r pulumi.Resource, err error) {
	switch typ {
	case "vault:pkiSecret/secretBackend:SecretBackend":
		r, err = NewSecretBackend(ctx, name, nil, pulumi.URN_(urn))
	case "vault:pkiSecret/secretBackendCert:SecretBackendCert":
		r, err = NewSecretBackendCert(ctx, name, nil, pulumi.URN_(urn))
	case "vault:pkiSecret/secretBackendConfigCa:SecretBackendConfigCa":
		r, err = NewSecretBackendConfigCa(ctx, name, nil, pulumi.URN_(urn))
	case "vault:pkiSecret/secretBackendConfigUrls:SecretBackendConfigUrls":
		r, err = NewSecretBackendConfigUrls(ctx, name, nil, pulumi.URN_(urn))
	case "vault:pkiSecret/secretBackendCrlConfig:SecretBackendCrlConfig":
		r, err = NewSecretBackendCrlConfig(ctx, name, nil, pulumi.URN_(urn))
	case "vault:pkiSecret/secretBackendIntermediateCertRequest:SecretBackendIntermediateCertRequest":
		r, err = NewSecretBackendIntermediateCertRequest(ctx, name, nil, pulumi.URN_(urn))
	case "vault:pkiSecret/secretBackendIntermediateSetSigned:SecretBackendIntermediateSetSigned":
		r, err = NewSecretBackendIntermediateSetSigned(ctx, name, nil, pulumi.URN_(urn))
	case "vault:pkiSecret/secretBackendRole:SecretBackendRole":
		r, err = NewSecretBackendRole(ctx, name, nil, pulumi.URN_(urn))
	case "vault:pkiSecret/secretBackendRootCert:SecretBackendRootCert":
		r, err = NewSecretBackendRootCert(ctx, name, nil, pulumi.URN_(urn))
	case "vault:pkiSecret/secretBackendRootSignIntermediate:SecretBackendRootSignIntermediate":
		r, err = NewSecretBackendRootSignIntermediate(ctx, name, nil, pulumi.URN_(urn))
	case "vault:pkiSecret/secretBackendSign:SecretBackendSign":
		r, err = NewSecretBackendSign(ctx, name, nil, pulumi.URN_(urn))
	default:
		return nil, fmt.Errorf("unknown resource type: %s", typ)
	}

	return
}

func init() {
	version, err := vault.PkgVersion()
	if err != nil {
		fmt.Println("failed to determine package version. defaulting to v1: %v", err)
	}
	pulumi.RegisterResourceModule(
		"vault",
		"pkiSecret/secretBackend",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vault",
		"pkiSecret/secretBackendCert",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vault",
		"pkiSecret/secretBackendConfigCa",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vault",
		"pkiSecret/secretBackendConfigUrls",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vault",
		"pkiSecret/secretBackendCrlConfig",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vault",
		"pkiSecret/secretBackendIntermediateCertRequest",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vault",
		"pkiSecret/secretBackendIntermediateSetSigned",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vault",
		"pkiSecret/secretBackendRole",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vault",
		"pkiSecret/secretBackendRootCert",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vault",
		"pkiSecret/secretBackendRootSignIntermediate",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vault",
		"pkiSecret/secretBackendSign",
		&module{version},
	)
}
