// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package vault

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Provides a resource to manage Password Policies
//
// **Note** this feature is available only Vault 1.5+
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"fmt"
//
// 	"github.com/pulumi/pulumi-vault/sdk/v3/go/vault"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := vault.NewPasswordPolicy(ctx, "alphanumeric", &vault.PasswordPolicyArgs{
// 			Policy: pulumi.String(fmt.Sprintf("%v%v%v%v%v", "length = 20\n", "rule \"charset\" {\n", "	  charset = \"abcdefghijklmnopqrstuvwxyz0123456789\"\n", "}\n", "\n")),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Password policies can be imported using the `name`, e.g.
//
// ```sh
//  $ pulumi import vault:index/passwordPolicy:PasswordPolicy alphanumeric alphanumeric
// ```
type PasswordPolicy struct {
	pulumi.CustomResourceState

	// The name of the password policy.
	Name pulumi.StringOutput `pulumi:"name"`
	// String containing a password policy.
	Policy pulumi.StringOutput `pulumi:"policy"`
}

// NewPasswordPolicy registers a new resource with the given unique name, arguments, and options.
func NewPasswordPolicy(ctx *pulumi.Context,
	name string, args *PasswordPolicyArgs, opts ...pulumi.ResourceOption) (*PasswordPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Policy == nil {
		return nil, errors.New("invalid value for required argument 'Policy'")
	}
	var resource PasswordPolicy
	err := ctx.RegisterResource("vault:index/passwordPolicy:PasswordPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPasswordPolicy gets an existing PasswordPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPasswordPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PasswordPolicyState, opts ...pulumi.ResourceOption) (*PasswordPolicy, error) {
	var resource PasswordPolicy
	err := ctx.ReadResource("vault:index/passwordPolicy:PasswordPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PasswordPolicy resources.
type passwordPolicyState struct {
	// The name of the password policy.
	Name *string `pulumi:"name"`
	// String containing a password policy.
	Policy *string `pulumi:"policy"`
}

type PasswordPolicyState struct {
	// The name of the password policy.
	Name pulumi.StringPtrInput
	// String containing a password policy.
	Policy pulumi.StringPtrInput
}

func (PasswordPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*passwordPolicyState)(nil)).Elem()
}

type passwordPolicyArgs struct {
	// The name of the password policy.
	Name *string `pulumi:"name"`
	// String containing a password policy.
	Policy string `pulumi:"policy"`
}

// The set of arguments for constructing a PasswordPolicy resource.
type PasswordPolicyArgs struct {
	// The name of the password policy.
	Name pulumi.StringPtrInput
	// String containing a password policy.
	Policy pulumi.StringInput
}

func (PasswordPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*passwordPolicyArgs)(nil)).Elem()
}

type PasswordPolicyInput interface {
	pulumi.Input

	ToPasswordPolicyOutput() PasswordPolicyOutput
	ToPasswordPolicyOutputWithContext(ctx context.Context) PasswordPolicyOutput
}

func (PasswordPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((*PasswordPolicy)(nil)).Elem()
}

func (i PasswordPolicy) ToPasswordPolicyOutput() PasswordPolicyOutput {
	return i.ToPasswordPolicyOutputWithContext(context.Background())
}

func (i PasswordPolicy) ToPasswordPolicyOutputWithContext(ctx context.Context) PasswordPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PasswordPolicyOutput)
}

type PasswordPolicyOutput struct {
	*pulumi.OutputState
}

func (PasswordPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PasswordPolicyOutput)(nil)).Elem()
}

func (o PasswordPolicyOutput) ToPasswordPolicyOutput() PasswordPolicyOutput {
	return o
}

func (o PasswordPolicyOutput) ToPasswordPolicyOutputWithContext(ctx context.Context) PasswordPolicyOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(PasswordPolicyOutput{})
}
