// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault.database.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class SecretBackendConnectionInfluxdb {
    /**
     * @return The number of seconds to use as a connection
     * timeout.
     * 
     */
    private final @Nullable Integer connectTimeout;
    /**
     * @return The host to connect to.
     * 
     */
    private final String host;
    /**
     * @return Whether to skip verification of the server
     * certificate when using TLS.
     * 
     */
    private final @Nullable Boolean insecureTls;
    /**
     * @return The root credential password used in the connection URL.
     * 
     */
    private final String password;
    /**
     * @return Concatenated PEM blocks configuring the certificate
     * chain.
     * 
     */
    private final @Nullable String pemBundle;
    /**
     * @return A JSON structure configuring the certificate chain.
     * 
     */
    private final @Nullable String pemJson;
    /**
     * @return The default port to connect to if no port is specified as
     * part of the host.
     * 
     */
    private final @Nullable Integer port;
    /**
     * @return Whether to use TLS when connecting to Cassandra.
     * 
     */
    private final @Nullable Boolean tls;
    /**
     * @return The root credential username used in the connection URL.
     * 
     */
    private final String username;
    /**
     * @return - [Template](https://www.vaultproject.io/docs/concepts/username-templating) describing how dynamic usernames are generated.
     * 
     */
    private final @Nullable String usernameTemplate;

    @CustomType.Constructor
    private SecretBackendConnectionInfluxdb(
        @CustomType.Parameter("connectTimeout") @Nullable Integer connectTimeout,
        @CustomType.Parameter("host") String host,
        @CustomType.Parameter("insecureTls") @Nullable Boolean insecureTls,
        @CustomType.Parameter("password") String password,
        @CustomType.Parameter("pemBundle") @Nullable String pemBundle,
        @CustomType.Parameter("pemJson") @Nullable String pemJson,
        @CustomType.Parameter("port") @Nullable Integer port,
        @CustomType.Parameter("tls") @Nullable Boolean tls,
        @CustomType.Parameter("username") String username,
        @CustomType.Parameter("usernameTemplate") @Nullable String usernameTemplate) {
        this.connectTimeout = connectTimeout;
        this.host = host;
        this.insecureTls = insecureTls;
        this.password = password;
        this.pemBundle = pemBundle;
        this.pemJson = pemJson;
        this.port = port;
        this.tls = tls;
        this.username = username;
        this.usernameTemplate = usernameTemplate;
    }

    /**
     * @return The number of seconds to use as a connection
     * timeout.
     * 
     */
    public Optional<Integer> connectTimeout() {
        return Optional.ofNullable(this.connectTimeout);
    }
    /**
     * @return The host to connect to.
     * 
     */
    public String host() {
        return this.host;
    }
    /**
     * @return Whether to skip verification of the server
     * certificate when using TLS.
     * 
     */
    public Optional<Boolean> insecureTls() {
        return Optional.ofNullable(this.insecureTls);
    }
    /**
     * @return The root credential password used in the connection URL.
     * 
     */
    public String password() {
        return this.password;
    }
    /**
     * @return Concatenated PEM blocks configuring the certificate
     * chain.
     * 
     */
    public Optional<String> pemBundle() {
        return Optional.ofNullable(this.pemBundle);
    }
    /**
     * @return A JSON structure configuring the certificate chain.
     * 
     */
    public Optional<String> pemJson() {
        return Optional.ofNullable(this.pemJson);
    }
    /**
     * @return The default port to connect to if no port is specified as
     * part of the host.
     * 
     */
    public Optional<Integer> port() {
        return Optional.ofNullable(this.port);
    }
    /**
     * @return Whether to use TLS when connecting to Cassandra.
     * 
     */
    public Optional<Boolean> tls() {
        return Optional.ofNullable(this.tls);
    }
    /**
     * @return The root credential username used in the connection URL.
     * 
     */
    public String username() {
        return this.username;
    }
    /**
     * @return - [Template](https://www.vaultproject.io/docs/concepts/username-templating) describing how dynamic usernames are generated.
     * 
     */
    public Optional<String> usernameTemplate() {
        return Optional.ofNullable(this.usernameTemplate);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SecretBackendConnectionInfluxdb defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Integer connectTimeout;
        private String host;
        private @Nullable Boolean insecureTls;
        private String password;
        private @Nullable String pemBundle;
        private @Nullable String pemJson;
        private @Nullable Integer port;
        private @Nullable Boolean tls;
        private String username;
        private @Nullable String usernameTemplate;

        public Builder() {
    	      // Empty
        }

        public Builder(SecretBackendConnectionInfluxdb defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.connectTimeout = defaults.connectTimeout;
    	      this.host = defaults.host;
    	      this.insecureTls = defaults.insecureTls;
    	      this.password = defaults.password;
    	      this.pemBundle = defaults.pemBundle;
    	      this.pemJson = defaults.pemJson;
    	      this.port = defaults.port;
    	      this.tls = defaults.tls;
    	      this.username = defaults.username;
    	      this.usernameTemplate = defaults.usernameTemplate;
        }

        public Builder connectTimeout(@Nullable Integer connectTimeout) {
            this.connectTimeout = connectTimeout;
            return this;
        }
        public Builder host(String host) {
            this.host = Objects.requireNonNull(host);
            return this;
        }
        public Builder insecureTls(@Nullable Boolean insecureTls) {
            this.insecureTls = insecureTls;
            return this;
        }
        public Builder password(String password) {
            this.password = Objects.requireNonNull(password);
            return this;
        }
        public Builder pemBundle(@Nullable String pemBundle) {
            this.pemBundle = pemBundle;
            return this;
        }
        public Builder pemJson(@Nullable String pemJson) {
            this.pemJson = pemJson;
            return this;
        }
        public Builder port(@Nullable Integer port) {
            this.port = port;
            return this;
        }
        public Builder tls(@Nullable Boolean tls) {
            this.tls = tls;
            return this;
        }
        public Builder username(String username) {
            this.username = Objects.requireNonNull(username);
            return this;
        }
        public Builder usernameTemplate(@Nullable String usernameTemplate) {
            this.usernameTemplate = usernameTemplate;
            return this;
        }        public SecretBackendConnectionInfluxdb build() {
            return new SecretBackendConnectionInfluxdb(connectTimeout, host, insecureTls, password, pemBundle, pemJson, port, tls, username, usernameTemplate);
        }
    }
}
