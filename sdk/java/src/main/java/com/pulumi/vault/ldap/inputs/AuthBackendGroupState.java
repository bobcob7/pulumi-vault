// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault.ldap.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AuthBackendGroupState extends com.pulumi.resources.ResourceArgs {

    public static final AuthBackendGroupState Empty = new AuthBackendGroupState();

    /**
     * Path to the authentication backend
     * 
     */
    @Import(name="backend")
    private @Nullable Output<String> backend;

    /**
     * @return Path to the authentication backend
     * 
     */
    public Optional<Output<String>> backend() {
        return Optional.ofNullable(this.backend);
    }

    /**
     * The LDAP groupname
     * 
     */
    @Import(name="groupname")
    private @Nullable Output<String> groupname;

    /**
     * @return The LDAP groupname
     * 
     */
    public Optional<Output<String>> groupname() {
        return Optional.ofNullable(this.groupname);
    }

    /**
     * Policies which should be granted to members of the group
     * 
     */
    @Import(name="policies")
    private @Nullable Output<List<String>> policies;

    /**
     * @return Policies which should be granted to members of the group
     * 
     */
    public Optional<Output<List<String>>> policies() {
        return Optional.ofNullable(this.policies);
    }

    private AuthBackendGroupState() {}

    private AuthBackendGroupState(AuthBackendGroupState $) {
        this.backend = $.backend;
        this.groupname = $.groupname;
        this.policies = $.policies;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AuthBackendGroupState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AuthBackendGroupState $;

        public Builder() {
            $ = new AuthBackendGroupState();
        }

        public Builder(AuthBackendGroupState defaults) {
            $ = new AuthBackendGroupState(Objects.requireNonNull(defaults));
        }

        /**
         * @param backend Path to the authentication backend
         * 
         * @return builder
         * 
         */
        public Builder backend(@Nullable Output<String> backend) {
            $.backend = backend;
            return this;
        }

        /**
         * @param backend Path to the authentication backend
         * 
         * @return builder
         * 
         */
        public Builder backend(String backend) {
            return backend(Output.of(backend));
        }

        /**
         * @param groupname The LDAP groupname
         * 
         * @return builder
         * 
         */
        public Builder groupname(@Nullable Output<String> groupname) {
            $.groupname = groupname;
            return this;
        }

        /**
         * @param groupname The LDAP groupname
         * 
         * @return builder
         * 
         */
        public Builder groupname(String groupname) {
            return groupname(Output.of(groupname));
        }

        /**
         * @param policies Policies which should be granted to members of the group
         * 
         * @return builder
         * 
         */
        public Builder policies(@Nullable Output<List<String>> policies) {
            $.policies = policies;
            return this;
        }

        /**
         * @param policies Policies which should be granted to members of the group
         * 
         * @return builder
         * 
         */
        public Builder policies(List<String> policies) {
            return policies(Output.of(policies));
        }

        /**
         * @param policies Policies which should be granted to members of the group
         * 
         * @return builder
         * 
         */
        public Builder policies(String... policies) {
            return policies(List.of(policies));
        }

        public AuthBackendGroupState build() {
            return $;
        }
    }

}
