// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault.identity;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class GroupAliasArgs extends com.pulumi.resources.ResourceArgs {

    public static final GroupAliasArgs Empty = new GroupAliasArgs();

    /**
     * ID of the group to which this is an alias.
     * 
     */
    @Import(name="canonicalId", required=true)
    private Output<String> canonicalId;

    /**
     * @return ID of the group to which this is an alias.
     * 
     */
    public Output<String> canonicalId() {
        return this.canonicalId;
    }

    /**
     * Mount accessor of the authentication backend to which this alias belongs to.
     * 
     */
    @Import(name="mountAccessor", required=true)
    private Output<String> mountAccessor;

    /**
     * @return Mount accessor of the authentication backend to which this alias belongs to.
     * 
     */
    public Output<String> mountAccessor() {
        return this.mountAccessor;
    }

    /**
     * Name of the group alias to create.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Name of the group alias to create.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    private GroupAliasArgs() {}

    private GroupAliasArgs(GroupAliasArgs $) {
        this.canonicalId = $.canonicalId;
        this.mountAccessor = $.mountAccessor;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GroupAliasArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GroupAliasArgs $;

        public Builder() {
            $ = new GroupAliasArgs();
        }

        public Builder(GroupAliasArgs defaults) {
            $ = new GroupAliasArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param canonicalId ID of the group to which this is an alias.
         * 
         * @return builder
         * 
         */
        public Builder canonicalId(Output<String> canonicalId) {
            $.canonicalId = canonicalId;
            return this;
        }

        /**
         * @param canonicalId ID of the group to which this is an alias.
         * 
         * @return builder
         * 
         */
        public Builder canonicalId(String canonicalId) {
            return canonicalId(Output.of(canonicalId));
        }

        /**
         * @param mountAccessor Mount accessor of the authentication backend to which this alias belongs to.
         * 
         * @return builder
         * 
         */
        public Builder mountAccessor(Output<String> mountAccessor) {
            $.mountAccessor = mountAccessor;
            return this;
        }

        /**
         * @param mountAccessor Mount accessor of the authentication backend to which this alias belongs to.
         * 
         * @return builder
         * 
         */
        public Builder mountAccessor(String mountAccessor) {
            return mountAccessor(Output.of(mountAccessor));
        }

        /**
         * @param name Name of the group alias to create.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the group alias to create.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public GroupAliasArgs build() {
            $.canonicalId = Objects.requireNonNull($.canonicalId, "expected parameter 'canonicalId' to be non-null");
            $.mountAccessor = Objects.requireNonNull($.mountAccessor, "expected parameter 'mountAccessor' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            return $;
        }
    }

}
