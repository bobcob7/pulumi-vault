// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class SecretRole extends pulumi.CustomResource {
    /**
     * Get an existing SecretRole resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SecretRoleState, opts?: pulumi.CustomResourceOptions): SecretRole {
        return new SecretRole(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vault:ad/secretRole:SecretRole';

    /**
     * Returns true if the given object is an instance of SecretRole.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SecretRole {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SecretRole.__pulumiType;
    }

    /**
     * The mount path for the AD backend.
     */
    public readonly backend!: pulumi.Output<string>;
    /**
     * Last time Vault rotated this service account's password.
     */
    public /*out*/ readonly lastVaultRotation!: pulumi.Output<string>;
    /**
     * Last time Vault set this service account's password.
     */
    public /*out*/ readonly passwordLastSet!: pulumi.Output<string>;
    /**
     * Name of the role.
     */
    public readonly role!: pulumi.Output<string>;
    /**
     * The username/logon name for the service account with which this role will be associated.
     */
    public readonly serviceAccountName!: pulumi.Output<string>;
    /**
     * In seconds, the default password time-to-live.
     */
    public readonly ttl!: pulumi.Output<number | undefined>;

    /**
     * Create a SecretRole resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SecretRoleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SecretRoleArgs | SecretRoleState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as SecretRoleState | undefined;
            inputs["backend"] = state ? state.backend : undefined;
            inputs["lastVaultRotation"] = state ? state.lastVaultRotation : undefined;
            inputs["passwordLastSet"] = state ? state.passwordLastSet : undefined;
            inputs["role"] = state ? state.role : undefined;
            inputs["serviceAccountName"] = state ? state.serviceAccountName : undefined;
            inputs["ttl"] = state ? state.ttl : undefined;
        } else {
            const args = argsOrState as SecretRoleArgs | undefined;
            if ((!args || args.backend === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'backend'");
            }
            if ((!args || args.role === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'role'");
            }
            if ((!args || args.serviceAccountName === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'serviceAccountName'");
            }
            inputs["backend"] = args ? args.backend : undefined;
            inputs["role"] = args ? args.role : undefined;
            inputs["serviceAccountName"] = args ? args.serviceAccountName : undefined;
            inputs["ttl"] = args ? args.ttl : undefined;
            inputs["lastVaultRotation"] = undefined /*out*/;
            inputs["passwordLastSet"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(SecretRole.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SecretRole resources.
 */
export interface SecretRoleState {
    /**
     * The mount path for the AD backend.
     */
    readonly backend?: pulumi.Input<string>;
    /**
     * Last time Vault rotated this service account's password.
     */
    readonly lastVaultRotation?: pulumi.Input<string>;
    /**
     * Last time Vault set this service account's password.
     */
    readonly passwordLastSet?: pulumi.Input<string>;
    /**
     * Name of the role.
     */
    readonly role?: pulumi.Input<string>;
    /**
     * The username/logon name for the service account with which this role will be associated.
     */
    readonly serviceAccountName?: pulumi.Input<string>;
    /**
     * In seconds, the default password time-to-live.
     */
    readonly ttl?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a SecretRole resource.
 */
export interface SecretRoleArgs {
    /**
     * The mount path for the AD backend.
     */
    readonly backend: pulumi.Input<string>;
    /**
     * Name of the role.
     */
    readonly role: pulumi.Input<string>;
    /**
     * The username/logon name for the service account with which this role will be associated.
     */
    readonly serviceAccountName: pulumi.Input<string>;
    /**
     * In seconds, the default password time-to-live.
     */
    readonly ttl?: pulumi.Input<number>;
}
