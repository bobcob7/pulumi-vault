// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package config

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
	"github.com/pulumi/pulumi/sdk/go/pulumi/config"
)

// URL of the root of the target Vault server.
func GetAddress(ctx *pulumi.Context) string {
	return config.Get(ctx, "vault:address")
}

// Path to directory containing CA certificate files to validate the server's certificate.
func GetCaCertDir(ctx *pulumi.Context) string {
	return config.Get(ctx, "vault:caCertDir")
}

// Path to a CA certificate file to validate the server's certificate.
func GetCaCertFile(ctx *pulumi.Context) string {
	return config.Get(ctx, "vault:caCertFile")
}

// Client authentication credentials.
func GetClientAuths(ctx *pulumi.Context) string {
	return config.Get(ctx, "vault:clientAuths")
}

// Maximum TTL for secret leases requested by this provider
func GetMaxLeaseTtlSeconds(ctx *pulumi.Context) int {
	return config.GetInt(ctx, "vault:maxLeaseTtlSeconds")
}

// Maximum number of retries when a 5xx error code is encountered.
func GetMaxRetries(ctx *pulumi.Context) int {
	return config.GetInt(ctx, "vault:maxRetries")
}

// The namespace to use. Available only for Vault Enterprise
func GetNamespace(ctx *pulumi.Context) string {
	return config.Get(ctx, "vault:namespace")
}

// Set this to true only if the target Vault server is an insecure development instance.
func GetSkipTlsVerify(ctx *pulumi.Context) bool {
	return config.GetBool(ctx, "vault:skipTlsVerify")
}

// Token to use to authenticate to Vault.
func GetToken(ctx *pulumi.Context) string {
	return config.Get(ctx, "vault:token")
}
