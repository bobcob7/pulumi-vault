// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault.aws;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AuthBackendStsRoleArgs extends com.pulumi.resources.ResourceArgs {

    public static final AuthBackendStsRoleArgs Empty = new AuthBackendStsRoleArgs();

    /**
     * The AWS account ID to configure the STS role for.
     * 
     */
    @Import(name="accountId", required=true)
    private Output<String> accountId;

    /**
     * @return The AWS account ID to configure the STS role for.
     * 
     */
    public Output<String> accountId() {
        return this.accountId;
    }

    /**
     * The path the AWS auth backend being configured was
     * mounted at.  Defaults to `aws`.
     * 
     */
    @Import(name="backend")
    private @Nullable Output<String> backend;

    /**
     * @return The path the AWS auth backend being configured was
     * mounted at.  Defaults to `aws`.
     * 
     */
    public Optional<Output<String>> backend() {
        return Optional.ofNullable(this.backend);
    }

    /**
     * The STS role to assume when verifying requests made
     * by EC2 instances in the account specified by `account_id`.
     * 
     */
    @Import(name="stsRole", required=true)
    private Output<String> stsRole;

    /**
     * @return The STS role to assume when verifying requests made
     * by EC2 instances in the account specified by `account_id`.
     * 
     */
    public Output<String> stsRole() {
        return this.stsRole;
    }

    private AuthBackendStsRoleArgs() {}

    private AuthBackendStsRoleArgs(AuthBackendStsRoleArgs $) {
        this.accountId = $.accountId;
        this.backend = $.backend;
        this.stsRole = $.stsRole;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AuthBackendStsRoleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AuthBackendStsRoleArgs $;

        public Builder() {
            $ = new AuthBackendStsRoleArgs();
        }

        public Builder(AuthBackendStsRoleArgs defaults) {
            $ = new AuthBackendStsRoleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId The AWS account ID to configure the STS role for.
         * 
         * @return builder
         * 
         */
        public Builder accountId(Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId The AWS account ID to configure the STS role for.
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param backend The path the AWS auth backend being configured was
         * mounted at.  Defaults to `aws`.
         * 
         * @return builder
         * 
         */
        public Builder backend(@Nullable Output<String> backend) {
            $.backend = backend;
            return this;
        }

        /**
         * @param backend The path the AWS auth backend being configured was
         * mounted at.  Defaults to `aws`.
         * 
         * @return builder
         * 
         */
        public Builder backend(String backend) {
            return backend(Output.of(backend));
        }

        /**
         * @param stsRole The STS role to assume when verifying requests made
         * by EC2 instances in the account specified by `account_id`.
         * 
         * @return builder
         * 
         */
        public Builder stsRole(Output<String> stsRole) {
            $.stsRole = stsRole;
            return this;
        }

        /**
         * @param stsRole The STS role to assume when verifying requests made
         * by EC2 instances in the account specified by `account_id`.
         * 
         * @return builder
         * 
         */
        public Builder stsRole(String stsRole) {
            return stsRole(Output.of(stsRole));
        }

        public AuthBackendStsRoleArgs build() {
            $.accountId = Objects.requireNonNull($.accountId, "expected parameter 'accountId' to be non-null");
            $.stsRole = Objects.requireNonNull($.stsRole, "expected parameter 'stsRole' to be non-null");
            return $;
        }
    }

}
