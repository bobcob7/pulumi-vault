// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class GetNomadAccessTokenPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetNomadAccessTokenPlainArgs Empty = new GetNomadAccessTokenPlainArgs();

    /**
     * The path to the Nomad secret backend to
     * read credentials from, with no leading or trailing `/`s.
     * 
     */
    @Import(name="backend", required=true)
    private String backend;

    /**
     * @return The path to the Nomad secret backend to
     * read credentials from, with no leading or trailing `/`s.
     * 
     */
    public String backend() {
        return this.backend;
    }

    /**
     * The name of the Nomad secret backend role to generate
     * a token for, with no leading or trailing `/`s.
     * 
     */
    @Import(name="role", required=true)
    private String role;

    /**
     * @return The name of the Nomad secret backend role to generate
     * a token for, with no leading or trailing `/`s.
     * 
     */
    public String role() {
        return this.role;
    }

    private GetNomadAccessTokenPlainArgs() {}

    private GetNomadAccessTokenPlainArgs(GetNomadAccessTokenPlainArgs $) {
        this.backend = $.backend;
        this.role = $.role;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetNomadAccessTokenPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetNomadAccessTokenPlainArgs $;

        public Builder() {
            $ = new GetNomadAccessTokenPlainArgs();
        }

        public Builder(GetNomadAccessTokenPlainArgs defaults) {
            $ = new GetNomadAccessTokenPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param backend The path to the Nomad secret backend to
         * read credentials from, with no leading or trailing `/`s.
         * 
         * @return builder
         * 
         */
        public Builder backend(String backend) {
            $.backend = backend;
            return this;
        }

        /**
         * @param role The name of the Nomad secret backend role to generate
         * a token for, with no leading or trailing `/`s.
         * 
         * @return builder
         * 
         */
        public Builder role(String role) {
            $.role = role;
            return this;
        }

        public GetNomadAccessTokenPlainArgs build() {
            $.backend = Objects.requireNonNull($.backend, "expected parameter 'backend' to be non-null");
            $.role = Objects.requireNonNull($.role, "expected parameter 'role' to be non-null");
            return $;
        }
    }

}
