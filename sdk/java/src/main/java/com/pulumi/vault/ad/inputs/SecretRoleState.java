// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault.ad.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SecretRoleState extends com.pulumi.resources.ResourceArgs {

    public static final SecretRoleState Empty = new SecretRoleState();

    /**
     * The path the AD secret backend is mounted at,
     * with no leading or trailing `/`s.
     * 
     */
    @Import(name="backend")
    private @Nullable Output<String> backend;

    /**
     * @return The path the AD secret backend is mounted at,
     * with no leading or trailing `/`s.
     * 
     */
    public Optional<Output<String>> backend() {
        return Optional.ofNullable(this.backend);
    }

    /**
     * Timestamp of the last password rotation by Vault.
     * 
     */
    @Import(name="lastVaultRotation")
    private @Nullable Output<String> lastVaultRotation;

    /**
     * @return Timestamp of the last password rotation by Vault.
     * 
     */
    public Optional<Output<String>> lastVaultRotation() {
        return Optional.ofNullable(this.lastVaultRotation);
    }

    /**
     * Timestamp of the last password set by Vault.
     * 
     */
    @Import(name="passwordLastSet")
    private @Nullable Output<String> passwordLastSet;

    /**
     * @return Timestamp of the last password set by Vault.
     * 
     */
    public Optional<Output<String>> passwordLastSet() {
        return Optional.ofNullable(this.passwordLastSet);
    }

    /**
     * The name to identify this role within the backend.
     * Must be unique within the backend.
     * 
     */
    @Import(name="role")
    private @Nullable Output<String> role;

    /**
     * @return The name to identify this role within the backend.
     * Must be unique within the backend.
     * 
     */
    public Optional<Output<String>> role() {
        return Optional.ofNullable(this.role);
    }

    /**
     * Specifies the name of the Active Directory service
     * account mapped to this role.
     * 
     */
    @Import(name="serviceAccountName")
    private @Nullable Output<String> serviceAccountName;

    /**
     * @return Specifies the name of the Active Directory service
     * account mapped to this role.
     * 
     */
    public Optional<Output<String>> serviceAccountName() {
        return Optional.ofNullable(this.serviceAccountName);
    }

    /**
     * The password time-to-live in seconds. Defaults to the configuration
     * ttl if not provided.
     * 
     */
    @Import(name="ttl")
    private @Nullable Output<Integer> ttl;

    /**
     * @return The password time-to-live in seconds. Defaults to the configuration
     * ttl if not provided.
     * 
     */
    public Optional<Output<Integer>> ttl() {
        return Optional.ofNullable(this.ttl);
    }

    private SecretRoleState() {}

    private SecretRoleState(SecretRoleState $) {
        this.backend = $.backend;
        this.lastVaultRotation = $.lastVaultRotation;
        this.passwordLastSet = $.passwordLastSet;
        this.role = $.role;
        this.serviceAccountName = $.serviceAccountName;
        this.ttl = $.ttl;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SecretRoleState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SecretRoleState $;

        public Builder() {
            $ = new SecretRoleState();
        }

        public Builder(SecretRoleState defaults) {
            $ = new SecretRoleState(Objects.requireNonNull(defaults));
        }

        /**
         * @param backend The path the AD secret backend is mounted at,
         * with no leading or trailing `/`s.
         * 
         * @return builder
         * 
         */
        public Builder backend(@Nullable Output<String> backend) {
            $.backend = backend;
            return this;
        }

        /**
         * @param backend The path the AD secret backend is mounted at,
         * with no leading or trailing `/`s.
         * 
         * @return builder
         * 
         */
        public Builder backend(String backend) {
            return backend(Output.of(backend));
        }

        /**
         * @param lastVaultRotation Timestamp of the last password rotation by Vault.
         * 
         * @return builder
         * 
         */
        public Builder lastVaultRotation(@Nullable Output<String> lastVaultRotation) {
            $.lastVaultRotation = lastVaultRotation;
            return this;
        }

        /**
         * @param lastVaultRotation Timestamp of the last password rotation by Vault.
         * 
         * @return builder
         * 
         */
        public Builder lastVaultRotation(String lastVaultRotation) {
            return lastVaultRotation(Output.of(lastVaultRotation));
        }

        /**
         * @param passwordLastSet Timestamp of the last password set by Vault.
         * 
         * @return builder
         * 
         */
        public Builder passwordLastSet(@Nullable Output<String> passwordLastSet) {
            $.passwordLastSet = passwordLastSet;
            return this;
        }

        /**
         * @param passwordLastSet Timestamp of the last password set by Vault.
         * 
         * @return builder
         * 
         */
        public Builder passwordLastSet(String passwordLastSet) {
            return passwordLastSet(Output.of(passwordLastSet));
        }

        /**
         * @param role The name to identify this role within the backend.
         * Must be unique within the backend.
         * 
         * @return builder
         * 
         */
        public Builder role(@Nullable Output<String> role) {
            $.role = role;
            return this;
        }

        /**
         * @param role The name to identify this role within the backend.
         * Must be unique within the backend.
         * 
         * @return builder
         * 
         */
        public Builder role(String role) {
            return role(Output.of(role));
        }

        /**
         * @param serviceAccountName Specifies the name of the Active Directory service
         * account mapped to this role.
         * 
         * @return builder
         * 
         */
        public Builder serviceAccountName(@Nullable Output<String> serviceAccountName) {
            $.serviceAccountName = serviceAccountName;
            return this;
        }

        /**
         * @param serviceAccountName Specifies the name of the Active Directory service
         * account mapped to this role.
         * 
         * @return builder
         * 
         */
        public Builder serviceAccountName(String serviceAccountName) {
            return serviceAccountName(Output.of(serviceAccountName));
        }

        /**
         * @param ttl The password time-to-live in seconds. Defaults to the configuration
         * ttl if not provided.
         * 
         * @return builder
         * 
         */
        public Builder ttl(@Nullable Output<Integer> ttl) {
            $.ttl = ttl;
            return this;
        }

        /**
         * @param ttl The password time-to-live in seconds. Defaults to the configuration
         * ttl if not provided.
         * 
         * @return builder
         * 
         */
        public Builder ttl(Integer ttl) {
            return ttl(Output.of(ttl));
        }

        public SecretRoleState build() {
            return $;
        }
    }

}
