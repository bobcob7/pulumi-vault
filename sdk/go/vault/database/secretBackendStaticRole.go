// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package database

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Creates a Database Secret Backend static role in Vault. Database secret backend
// static roles can be used to manage 1-to-1 mapping of a Vault Role to a user in a
// database for the database.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-vault/blob/master/website/docs/r/database_secret_backend_static_role.html.markdown.
type SecretBackendStaticRole struct {
	s *pulumi.ResourceState
}

// NewSecretBackendStaticRole registers a new resource with the given unique name, arguments, and options.
func NewSecretBackendStaticRole(ctx *pulumi.Context,
	name string, args *SecretBackendStaticRoleArgs, opts ...pulumi.ResourceOpt) (*SecretBackendStaticRole, error) {
	if args == nil || args.Backend == nil {
		return nil, errors.New("missing required argument 'Backend'")
	}
	if args == nil || args.DbName == nil {
		return nil, errors.New("missing required argument 'DbName'")
	}
	if args == nil || args.RotationPeriod == nil {
		return nil, errors.New("missing required argument 'RotationPeriod'")
	}
	if args == nil || args.Username == nil {
		return nil, errors.New("missing required argument 'Username'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["backend"] = nil
		inputs["dbName"] = nil
		inputs["name"] = nil
		inputs["rotationPeriod"] = nil
		inputs["rotationStatements"] = nil
		inputs["username"] = nil
	} else {
		inputs["backend"] = args.Backend
		inputs["dbName"] = args.DbName
		inputs["name"] = args.Name
		inputs["rotationPeriod"] = args.RotationPeriod
		inputs["rotationStatements"] = args.RotationStatements
		inputs["username"] = args.Username
	}
	s, err := ctx.RegisterResource("vault:database/secretBackendStaticRole:SecretBackendStaticRole", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &SecretBackendStaticRole{s: s}, nil
}

// GetSecretBackendStaticRole gets an existing SecretBackendStaticRole resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecretBackendStaticRole(ctx *pulumi.Context,
	name string, id pulumi.ID, state *SecretBackendStaticRoleState, opts ...pulumi.ResourceOpt) (*SecretBackendStaticRole, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["backend"] = state.Backend
		inputs["dbName"] = state.DbName
		inputs["name"] = state.Name
		inputs["rotationPeriod"] = state.RotationPeriod
		inputs["rotationStatements"] = state.RotationStatements
		inputs["username"] = state.Username
	}
	s, err := ctx.ReadResource("vault:database/secretBackendStaticRole:SecretBackendStaticRole", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &SecretBackendStaticRole{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *SecretBackendStaticRole) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *SecretBackendStaticRole) ID() pulumi.IDOutput {
	return r.s.ID()
}

// The unique name of the Vault mount to configure.
func (r *SecretBackendStaticRole) Backend() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["backend"])
}

// The unique name of the database connection to use for the static role.
func (r *SecretBackendStaticRole) DbName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["dbName"])
}

// A unique name to give the static role.
func (r *SecretBackendStaticRole) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// The amount of time Vault should wait before rotating the password, in seconds.
func (r *SecretBackendStaticRole) RotationPeriod() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["rotationPeriod"])
}

// Database statements to execute to rotate the password for the configured database user.
func (r *SecretBackendStaticRole) RotationStatements() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["rotationStatements"])
}

// The database username that this static role corresponds to.
func (r *SecretBackendStaticRole) Username() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["username"])
}

// Input properties used for looking up and filtering SecretBackendStaticRole resources.
type SecretBackendStaticRoleState struct {
	// The unique name of the Vault mount to configure.
	Backend interface{}
	// The unique name of the database connection to use for the static role.
	DbName interface{}
	// A unique name to give the static role.
	Name interface{}
	// The amount of time Vault should wait before rotating the password, in seconds.
	RotationPeriod interface{}
	// Database statements to execute to rotate the password for the configured database user.
	RotationStatements interface{}
	// The database username that this static role corresponds to.
	Username interface{}
}

// The set of arguments for constructing a SecretBackendStaticRole resource.
type SecretBackendStaticRoleArgs struct {
	// The unique name of the Vault mount to configure.
	Backend interface{}
	// The unique name of the database connection to use for the static role.
	DbName interface{}
	// A unique name to give the static role.
	Name interface{}
	// The amount of time Vault should wait before rotating the password, in seconds.
	RotationPeriod interface{}
	// Database statements to execute to rotate the password for the configured database user.
	RotationStatements interface{}
	// The database username that this static role corresponds to.
	Username interface{}
}
