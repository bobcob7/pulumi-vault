// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package identity

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for configuring the totp MFA method.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-vault/sdk/v5/go/vault/identity"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := identity.NewMfaTOTP(ctx, "example", &identity.MfaTOTPArgs{
//				Issuer: pulumi.String("issuer1"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Resource can be imported using its `uuid` field, e.g.
//
// ```sh
//
//	$ pulumi import vault:identity/mfaTOTP:MfaTOTP example 0d89c36a-4ff5-4d70-8749-bb6a5598aeec
//
// ```
type MfaTOTP struct {
	pulumi.CustomResourceState

	// Specifies the hashing algorithm used to generate the TOTP code. Options include SHA1, SHA256, SHA512.
	Algorithm pulumi.StringPtrOutput `pulumi:"algorithm"`
	// The number of digits in the generated TOTP token. This value can either be 6 or 8
	Digits pulumi.IntPtrOutput `pulumi:"digits"`
	// The name of the key's issuing organization.
	Issuer pulumi.StringOutput `pulumi:"issuer"`
	// Specifies the size in bytes of the generated key.
	KeySize pulumi.IntPtrOutput `pulumi:"keySize"`
	// The maximum number of consecutive failed validation attempts allowed.
	MaxValidationAttempts pulumi.IntPtrOutput `pulumi:"maxValidationAttempts"`
	// Method ID.
	MethodId pulumi.StringOutput `pulumi:"methodId"`
	// Mount accessor.
	MountAccessor pulumi.StringOutput `pulumi:"mountAccessor"`
	// Method name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Target namespace. (requires Enterprise)
	Namespace pulumi.StringPtrOutput `pulumi:"namespace"`
	// Method's namespace ID.
	NamespaceId pulumi.StringOutput `pulumi:"namespaceId"`
	// Method's namespace path.
	NamespacePath pulumi.StringOutput `pulumi:"namespacePath"`
	// The length of time in seconds used to generate a counter for the TOTP token calculation.
	Period pulumi.IntPtrOutput `pulumi:"period"`
	// The pixel size of the generated square QR code.
	QrSize pulumi.IntOutput `pulumi:"qrSize"`
	// The number of delay periods that are allowed when validating a TOTP token. This value can either be 0 or 1.
	Skew pulumi.IntPtrOutput `pulumi:"skew"`
	// MFA type.
	Type pulumi.StringOutput `pulumi:"type"`
	// Resource UUID.
	Uuid pulumi.StringOutput `pulumi:"uuid"`
}

// NewMfaTOTP registers a new resource with the given unique name, arguments, and options.
func NewMfaTOTP(ctx *pulumi.Context,
	name string, args *MfaTOTPArgs, opts ...pulumi.ResourceOption) (*MfaTOTP, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Issuer == nil {
		return nil, errors.New("invalid value for required argument 'Issuer'")
	}
	var resource MfaTOTP
	err := ctx.RegisterResource("vault:identity/mfaTOTP:MfaTOTP", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMfaTOTP gets an existing MfaTOTP resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMfaTOTP(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MfaTOTPState, opts ...pulumi.ResourceOption) (*MfaTOTP, error) {
	var resource MfaTOTP
	err := ctx.ReadResource("vault:identity/mfaTOTP:MfaTOTP", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MfaTOTP resources.
type mfaTOTPState struct {
	// Specifies the hashing algorithm used to generate the TOTP code. Options include SHA1, SHA256, SHA512.
	Algorithm *string `pulumi:"algorithm"`
	// The number of digits in the generated TOTP token. This value can either be 6 or 8
	Digits *int `pulumi:"digits"`
	// The name of the key's issuing organization.
	Issuer *string `pulumi:"issuer"`
	// Specifies the size in bytes of the generated key.
	KeySize *int `pulumi:"keySize"`
	// The maximum number of consecutive failed validation attempts allowed.
	MaxValidationAttempts *int `pulumi:"maxValidationAttempts"`
	// Method ID.
	MethodId *string `pulumi:"methodId"`
	// Mount accessor.
	MountAccessor *string `pulumi:"mountAccessor"`
	// Method name.
	Name *string `pulumi:"name"`
	// Target namespace. (requires Enterprise)
	Namespace *string `pulumi:"namespace"`
	// Method's namespace ID.
	NamespaceId *string `pulumi:"namespaceId"`
	// Method's namespace path.
	NamespacePath *string `pulumi:"namespacePath"`
	// The length of time in seconds used to generate a counter for the TOTP token calculation.
	Period *int `pulumi:"period"`
	// The pixel size of the generated square QR code.
	QrSize *int `pulumi:"qrSize"`
	// The number of delay periods that are allowed when validating a TOTP token. This value can either be 0 or 1.
	Skew *int `pulumi:"skew"`
	// MFA type.
	Type *string `pulumi:"type"`
	// Resource UUID.
	Uuid *string `pulumi:"uuid"`
}

type MfaTOTPState struct {
	// Specifies the hashing algorithm used to generate the TOTP code. Options include SHA1, SHA256, SHA512.
	Algorithm pulumi.StringPtrInput
	// The number of digits in the generated TOTP token. This value can either be 6 or 8
	Digits pulumi.IntPtrInput
	// The name of the key's issuing organization.
	Issuer pulumi.StringPtrInput
	// Specifies the size in bytes of the generated key.
	KeySize pulumi.IntPtrInput
	// The maximum number of consecutive failed validation attempts allowed.
	MaxValidationAttempts pulumi.IntPtrInput
	// Method ID.
	MethodId pulumi.StringPtrInput
	// Mount accessor.
	MountAccessor pulumi.StringPtrInput
	// Method name.
	Name pulumi.StringPtrInput
	// Target namespace. (requires Enterprise)
	Namespace pulumi.StringPtrInput
	// Method's namespace ID.
	NamespaceId pulumi.StringPtrInput
	// Method's namespace path.
	NamespacePath pulumi.StringPtrInput
	// The length of time in seconds used to generate a counter for the TOTP token calculation.
	Period pulumi.IntPtrInput
	// The pixel size of the generated square QR code.
	QrSize pulumi.IntPtrInput
	// The number of delay periods that are allowed when validating a TOTP token. This value can either be 0 or 1.
	Skew pulumi.IntPtrInput
	// MFA type.
	Type pulumi.StringPtrInput
	// Resource UUID.
	Uuid pulumi.StringPtrInput
}

func (MfaTOTPState) ElementType() reflect.Type {
	return reflect.TypeOf((*mfaTOTPState)(nil)).Elem()
}

type mfaTOTPArgs struct {
	// Specifies the hashing algorithm used to generate the TOTP code. Options include SHA1, SHA256, SHA512.
	Algorithm *string `pulumi:"algorithm"`
	// The number of digits in the generated TOTP token. This value can either be 6 or 8
	Digits *int `pulumi:"digits"`
	// The name of the key's issuing organization.
	Issuer string `pulumi:"issuer"`
	// Specifies the size in bytes of the generated key.
	KeySize *int `pulumi:"keySize"`
	// The maximum number of consecutive failed validation attempts allowed.
	MaxValidationAttempts *int `pulumi:"maxValidationAttempts"`
	// Target namespace. (requires Enterprise)
	Namespace *string `pulumi:"namespace"`
	// The length of time in seconds used to generate a counter for the TOTP token calculation.
	Period *int `pulumi:"period"`
	// The number of delay periods that are allowed when validating a TOTP token. This value can either be 0 or 1.
	Skew *int `pulumi:"skew"`
}

// The set of arguments for constructing a MfaTOTP resource.
type MfaTOTPArgs struct {
	// Specifies the hashing algorithm used to generate the TOTP code. Options include SHA1, SHA256, SHA512.
	Algorithm pulumi.StringPtrInput
	// The number of digits in the generated TOTP token. This value can either be 6 or 8
	Digits pulumi.IntPtrInput
	// The name of the key's issuing organization.
	Issuer pulumi.StringInput
	// Specifies the size in bytes of the generated key.
	KeySize pulumi.IntPtrInput
	// The maximum number of consecutive failed validation attempts allowed.
	MaxValidationAttempts pulumi.IntPtrInput
	// Target namespace. (requires Enterprise)
	Namespace pulumi.StringPtrInput
	// The length of time in seconds used to generate a counter for the TOTP token calculation.
	Period pulumi.IntPtrInput
	// The number of delay periods that are allowed when validating a TOTP token. This value can either be 0 or 1.
	Skew pulumi.IntPtrInput
}

func (MfaTOTPArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mfaTOTPArgs)(nil)).Elem()
}

type MfaTOTPInput interface {
	pulumi.Input

	ToMfaTOTPOutput() MfaTOTPOutput
	ToMfaTOTPOutputWithContext(ctx context.Context) MfaTOTPOutput
}

func (*MfaTOTP) ElementType() reflect.Type {
	return reflect.TypeOf((**MfaTOTP)(nil)).Elem()
}

func (i *MfaTOTP) ToMfaTOTPOutput() MfaTOTPOutput {
	return i.ToMfaTOTPOutputWithContext(context.Background())
}

func (i *MfaTOTP) ToMfaTOTPOutputWithContext(ctx context.Context) MfaTOTPOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MfaTOTPOutput)
}

// MfaTOTPArrayInput is an input type that accepts MfaTOTPArray and MfaTOTPArrayOutput values.
// You can construct a concrete instance of `MfaTOTPArrayInput` via:
//
//	MfaTOTPArray{ MfaTOTPArgs{...} }
type MfaTOTPArrayInput interface {
	pulumi.Input

	ToMfaTOTPArrayOutput() MfaTOTPArrayOutput
	ToMfaTOTPArrayOutputWithContext(context.Context) MfaTOTPArrayOutput
}

type MfaTOTPArray []MfaTOTPInput

func (MfaTOTPArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MfaTOTP)(nil)).Elem()
}

func (i MfaTOTPArray) ToMfaTOTPArrayOutput() MfaTOTPArrayOutput {
	return i.ToMfaTOTPArrayOutputWithContext(context.Background())
}

func (i MfaTOTPArray) ToMfaTOTPArrayOutputWithContext(ctx context.Context) MfaTOTPArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MfaTOTPArrayOutput)
}

// MfaTOTPMapInput is an input type that accepts MfaTOTPMap and MfaTOTPMapOutput values.
// You can construct a concrete instance of `MfaTOTPMapInput` via:
//
//	MfaTOTPMap{ "key": MfaTOTPArgs{...} }
type MfaTOTPMapInput interface {
	pulumi.Input

	ToMfaTOTPMapOutput() MfaTOTPMapOutput
	ToMfaTOTPMapOutputWithContext(context.Context) MfaTOTPMapOutput
}

type MfaTOTPMap map[string]MfaTOTPInput

func (MfaTOTPMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MfaTOTP)(nil)).Elem()
}

func (i MfaTOTPMap) ToMfaTOTPMapOutput() MfaTOTPMapOutput {
	return i.ToMfaTOTPMapOutputWithContext(context.Background())
}

func (i MfaTOTPMap) ToMfaTOTPMapOutputWithContext(ctx context.Context) MfaTOTPMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MfaTOTPMapOutput)
}

type MfaTOTPOutput struct{ *pulumi.OutputState }

func (MfaTOTPOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MfaTOTP)(nil)).Elem()
}

func (o MfaTOTPOutput) ToMfaTOTPOutput() MfaTOTPOutput {
	return o
}

func (o MfaTOTPOutput) ToMfaTOTPOutputWithContext(ctx context.Context) MfaTOTPOutput {
	return o
}

// Specifies the hashing algorithm used to generate the TOTP code. Options include SHA1, SHA256, SHA512.
func (o MfaTOTPOutput) Algorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MfaTOTP) pulumi.StringPtrOutput { return v.Algorithm }).(pulumi.StringPtrOutput)
}

// The number of digits in the generated TOTP token. This value can either be 6 or 8
func (o MfaTOTPOutput) Digits() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MfaTOTP) pulumi.IntPtrOutput { return v.Digits }).(pulumi.IntPtrOutput)
}

// The name of the key's issuing organization.
func (o MfaTOTPOutput) Issuer() pulumi.StringOutput {
	return o.ApplyT(func(v *MfaTOTP) pulumi.StringOutput { return v.Issuer }).(pulumi.StringOutput)
}

// Specifies the size in bytes of the generated key.
func (o MfaTOTPOutput) KeySize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MfaTOTP) pulumi.IntPtrOutput { return v.KeySize }).(pulumi.IntPtrOutput)
}

// The maximum number of consecutive failed validation attempts allowed.
func (o MfaTOTPOutput) MaxValidationAttempts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MfaTOTP) pulumi.IntPtrOutput { return v.MaxValidationAttempts }).(pulumi.IntPtrOutput)
}

// Method ID.
func (o MfaTOTPOutput) MethodId() pulumi.StringOutput {
	return o.ApplyT(func(v *MfaTOTP) pulumi.StringOutput { return v.MethodId }).(pulumi.StringOutput)
}

// Mount accessor.
func (o MfaTOTPOutput) MountAccessor() pulumi.StringOutput {
	return o.ApplyT(func(v *MfaTOTP) pulumi.StringOutput { return v.MountAccessor }).(pulumi.StringOutput)
}

// Method name.
func (o MfaTOTPOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MfaTOTP) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Target namespace. (requires Enterprise)
func (o MfaTOTPOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MfaTOTP) pulumi.StringPtrOutput { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Method's namespace ID.
func (o MfaTOTPOutput) NamespaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *MfaTOTP) pulumi.StringOutput { return v.NamespaceId }).(pulumi.StringOutput)
}

// Method's namespace path.
func (o MfaTOTPOutput) NamespacePath() pulumi.StringOutput {
	return o.ApplyT(func(v *MfaTOTP) pulumi.StringOutput { return v.NamespacePath }).(pulumi.StringOutput)
}

// The length of time in seconds used to generate a counter for the TOTP token calculation.
func (o MfaTOTPOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MfaTOTP) pulumi.IntPtrOutput { return v.Period }).(pulumi.IntPtrOutput)
}

// The pixel size of the generated square QR code.
func (o MfaTOTPOutput) QrSize() pulumi.IntOutput {
	return o.ApplyT(func(v *MfaTOTP) pulumi.IntOutput { return v.QrSize }).(pulumi.IntOutput)
}

// The number of delay periods that are allowed when validating a TOTP token. This value can either be 0 or 1.
func (o MfaTOTPOutput) Skew() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MfaTOTP) pulumi.IntPtrOutput { return v.Skew }).(pulumi.IntPtrOutput)
}

// MFA type.
func (o MfaTOTPOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *MfaTOTP) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Resource UUID.
func (o MfaTOTPOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v *MfaTOTP) pulumi.StringOutput { return v.Uuid }).(pulumi.StringOutput)
}

type MfaTOTPArrayOutput struct{ *pulumi.OutputState }

func (MfaTOTPArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MfaTOTP)(nil)).Elem()
}

func (o MfaTOTPArrayOutput) ToMfaTOTPArrayOutput() MfaTOTPArrayOutput {
	return o
}

func (o MfaTOTPArrayOutput) ToMfaTOTPArrayOutputWithContext(ctx context.Context) MfaTOTPArrayOutput {
	return o
}

func (o MfaTOTPArrayOutput) Index(i pulumi.IntInput) MfaTOTPOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MfaTOTP {
		return vs[0].([]*MfaTOTP)[vs[1].(int)]
	}).(MfaTOTPOutput)
}

type MfaTOTPMapOutput struct{ *pulumi.OutputState }

func (MfaTOTPMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MfaTOTP)(nil)).Elem()
}

func (o MfaTOTPMapOutput) ToMfaTOTPMapOutput() MfaTOTPMapOutput {
	return o
}

func (o MfaTOTPMapOutput) ToMfaTOTPMapOutputWithContext(ctx context.Context) MfaTOTPMapOutput {
	return o
}

func (o MfaTOTPMapOutput) MapIndex(k pulumi.StringInput) MfaTOTPOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MfaTOTP {
		return vs[0].(map[string]*MfaTOTP)[vs[1].(string)]
	}).(MfaTOTPOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MfaTOTPInput)(nil)).Elem(), &MfaTOTP{})
	pulumi.RegisterInputType(reflect.TypeOf((*MfaTOTPArrayInput)(nil)).Elem(), MfaTOTPArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MfaTOTPMapInput)(nil)).Elem(), MfaTOTPMap{})
	pulumi.RegisterOutputType(MfaTOTPOutput{})
	pulumi.RegisterOutputType(MfaTOTPArrayOutput{})
	pulumi.RegisterOutputType(MfaTOTPMapOutput{})
}
