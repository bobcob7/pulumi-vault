// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault.azure.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetAccessCredentialsResult {
    private final String backend;
    /**
     * @return The client id for credentials to query the Azure APIs.
     * 
     */
    private final String clientId;
    /**
     * @return The client secret for credentials to query the Azure APIs.
     * 
     */
    private final String clientSecret;
    private final @Nullable String environment;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private final String id;
    /**
     * @return The duration of the secret lease, in seconds relative
     * to the time the data was requested. Once this time has passed any plan
     * generated with this data may fail to apply.
     * 
     */
    private final Integer leaseDuration;
    /**
     * @return The lease identifier assigned by Vault.
     * 
     */
    private final String leaseId;
    private final Boolean leaseRenewable;
    private final String leaseStartTime;
    private final @Nullable Integer maxCredValidationSeconds;
    private final @Nullable Integer numSecondsBetweenTests;
    private final @Nullable Integer numSequentialSuccesses;
    private final String role;
    private final @Nullable String subscriptionId;
    private final @Nullable String tenantId;
    private final @Nullable Boolean validateCreds;

    @CustomType.Constructor
    private GetAccessCredentialsResult(
        @CustomType.Parameter("backend") String backend,
        @CustomType.Parameter("clientId") String clientId,
        @CustomType.Parameter("clientSecret") String clientSecret,
        @CustomType.Parameter("environment") @Nullable String environment,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("leaseDuration") Integer leaseDuration,
        @CustomType.Parameter("leaseId") String leaseId,
        @CustomType.Parameter("leaseRenewable") Boolean leaseRenewable,
        @CustomType.Parameter("leaseStartTime") String leaseStartTime,
        @CustomType.Parameter("maxCredValidationSeconds") @Nullable Integer maxCredValidationSeconds,
        @CustomType.Parameter("numSecondsBetweenTests") @Nullable Integer numSecondsBetweenTests,
        @CustomType.Parameter("numSequentialSuccesses") @Nullable Integer numSequentialSuccesses,
        @CustomType.Parameter("role") String role,
        @CustomType.Parameter("subscriptionId") @Nullable String subscriptionId,
        @CustomType.Parameter("tenantId") @Nullable String tenantId,
        @CustomType.Parameter("validateCreds") @Nullable Boolean validateCreds) {
        this.backend = backend;
        this.clientId = clientId;
        this.clientSecret = clientSecret;
        this.environment = environment;
        this.id = id;
        this.leaseDuration = leaseDuration;
        this.leaseId = leaseId;
        this.leaseRenewable = leaseRenewable;
        this.leaseStartTime = leaseStartTime;
        this.maxCredValidationSeconds = maxCredValidationSeconds;
        this.numSecondsBetweenTests = numSecondsBetweenTests;
        this.numSequentialSuccesses = numSequentialSuccesses;
        this.role = role;
        this.subscriptionId = subscriptionId;
        this.tenantId = tenantId;
        this.validateCreds = validateCreds;
    }

    public String backend() {
        return this.backend;
    }
    /**
     * @return The client id for credentials to query the Azure APIs.
     * 
     */
    public String clientId() {
        return this.clientId;
    }
    /**
     * @return The client secret for credentials to query the Azure APIs.
     * 
     */
    public String clientSecret() {
        return this.clientSecret;
    }
    public Optional<String> environment() {
        return Optional.ofNullable(this.environment);
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The duration of the secret lease, in seconds relative
     * to the time the data was requested. Once this time has passed any plan
     * generated with this data may fail to apply.
     * 
     */
    public Integer leaseDuration() {
        return this.leaseDuration;
    }
    /**
     * @return The lease identifier assigned by Vault.
     * 
     */
    public String leaseId() {
        return this.leaseId;
    }
    public Boolean leaseRenewable() {
        return this.leaseRenewable;
    }
    public String leaseStartTime() {
        return this.leaseStartTime;
    }
    public Optional<Integer> maxCredValidationSeconds() {
        return Optional.ofNullable(this.maxCredValidationSeconds);
    }
    public Optional<Integer> numSecondsBetweenTests() {
        return Optional.ofNullable(this.numSecondsBetweenTests);
    }
    public Optional<Integer> numSequentialSuccesses() {
        return Optional.ofNullable(this.numSequentialSuccesses);
    }
    public String role() {
        return this.role;
    }
    public Optional<String> subscriptionId() {
        return Optional.ofNullable(this.subscriptionId);
    }
    public Optional<String> tenantId() {
        return Optional.ofNullable(this.tenantId);
    }
    public Optional<Boolean> validateCreds() {
        return Optional.ofNullable(this.validateCreds);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAccessCredentialsResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String backend;
        private String clientId;
        private String clientSecret;
        private @Nullable String environment;
        private String id;
        private Integer leaseDuration;
        private String leaseId;
        private Boolean leaseRenewable;
        private String leaseStartTime;
        private @Nullable Integer maxCredValidationSeconds;
        private @Nullable Integer numSecondsBetweenTests;
        private @Nullable Integer numSequentialSuccesses;
        private String role;
        private @Nullable String subscriptionId;
        private @Nullable String tenantId;
        private @Nullable Boolean validateCreds;

        public Builder() {
    	      // Empty
        }

        public Builder(GetAccessCredentialsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backend = defaults.backend;
    	      this.clientId = defaults.clientId;
    	      this.clientSecret = defaults.clientSecret;
    	      this.environment = defaults.environment;
    	      this.id = defaults.id;
    	      this.leaseDuration = defaults.leaseDuration;
    	      this.leaseId = defaults.leaseId;
    	      this.leaseRenewable = defaults.leaseRenewable;
    	      this.leaseStartTime = defaults.leaseStartTime;
    	      this.maxCredValidationSeconds = defaults.maxCredValidationSeconds;
    	      this.numSecondsBetweenTests = defaults.numSecondsBetweenTests;
    	      this.numSequentialSuccesses = defaults.numSequentialSuccesses;
    	      this.role = defaults.role;
    	      this.subscriptionId = defaults.subscriptionId;
    	      this.tenantId = defaults.tenantId;
    	      this.validateCreds = defaults.validateCreds;
        }

        public Builder backend(String backend) {
            this.backend = Objects.requireNonNull(backend);
            return this;
        }
        public Builder clientId(String clientId) {
            this.clientId = Objects.requireNonNull(clientId);
            return this;
        }
        public Builder clientSecret(String clientSecret) {
            this.clientSecret = Objects.requireNonNull(clientSecret);
            return this;
        }
        public Builder environment(@Nullable String environment) {
            this.environment = environment;
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder leaseDuration(Integer leaseDuration) {
            this.leaseDuration = Objects.requireNonNull(leaseDuration);
            return this;
        }
        public Builder leaseId(String leaseId) {
            this.leaseId = Objects.requireNonNull(leaseId);
            return this;
        }
        public Builder leaseRenewable(Boolean leaseRenewable) {
            this.leaseRenewable = Objects.requireNonNull(leaseRenewable);
            return this;
        }
        public Builder leaseStartTime(String leaseStartTime) {
            this.leaseStartTime = Objects.requireNonNull(leaseStartTime);
            return this;
        }
        public Builder maxCredValidationSeconds(@Nullable Integer maxCredValidationSeconds) {
            this.maxCredValidationSeconds = maxCredValidationSeconds;
            return this;
        }
        public Builder numSecondsBetweenTests(@Nullable Integer numSecondsBetweenTests) {
            this.numSecondsBetweenTests = numSecondsBetweenTests;
            return this;
        }
        public Builder numSequentialSuccesses(@Nullable Integer numSequentialSuccesses) {
            this.numSequentialSuccesses = numSequentialSuccesses;
            return this;
        }
        public Builder role(String role) {
            this.role = Objects.requireNonNull(role);
            return this;
        }
        public Builder subscriptionId(@Nullable String subscriptionId) {
            this.subscriptionId = subscriptionId;
            return this;
        }
        public Builder tenantId(@Nullable String tenantId) {
            this.tenantId = tenantId;
            return this;
        }
        public Builder validateCreds(@Nullable Boolean validateCreds) {
            this.validateCreds = validateCreds;
            return this;
        }        public GetAccessCredentialsResult build() {
            return new GetAccessCredentialsResult(backend, clientId, clientSecret, environment, id, leaseDuration, leaseId, leaseRenewable, leaseStartTime, maxCredValidationSeconds, numSecondsBetweenTests, numSequentialSuccesses, role, subscriptionId, tenantId, validateCreds);
        }
    }
}
