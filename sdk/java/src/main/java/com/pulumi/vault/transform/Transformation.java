// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault.transform;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.vault.Utilities;
import com.pulumi.vault.transform.TransformationArgs;
import com.pulumi.vault.transform.inputs.TransformationState;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * This resource supports the &#34;/transform/transformation/{name}&#34; Vault endpoint.
 * 
 * It creates or updates a transformation with the given name. If a transformation with the name does not exist,
 * it will be created. If the transformation exists, it will be updated with the new attributes.
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.vault.Mount;
 * import com.pulumi.vault.MountArgs;
 * import com.pulumi.vault.transform.Transformation;
 * import com.pulumi.vault.transform.TransformationArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var mountTransform = new Mount(&#34;mountTransform&#34;, MountArgs.builder()        
 *             .path(&#34;transform&#34;)
 *             .type(&#34;transform&#34;)
 *             .build());
 * 
 *         var test = new Transformation(&#34;test&#34;, TransformationArgs.builder()        
 *             .path(mountTransform.path())
 *             .type(&#34;fpe&#34;)
 *             .template(&#34;ccn&#34;)
 *             .tweakSource(&#34;internal&#34;)
 *             .allowedRoles(&#34;payments&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 */
@ResourceType(type="vault:transform/transformation:Transformation")
public class Transformation extends com.pulumi.resources.CustomResource {
    /**
     * The set of roles allowed to perform this transformation.
     * 
     */
    @Export(name="allowedRoles", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> allowedRoles;

    /**
     * @return The set of roles allowed to perform this transformation.
     * 
     */
    public Output<Optional<List<String>>> allowedRoles() {
        return Codegen.optional(this.allowedRoles);
    }
    /**
     * The character used to replace data when in masking mode
     * 
     */
    @Export(name="maskingCharacter", type=String.class, parameters={})
    private Output</* @Nullable */ String> maskingCharacter;

    /**
     * @return The character used to replace data when in masking mode
     * 
     */
    public Output<Optional<String>> maskingCharacter() {
        return Codegen.optional(this.maskingCharacter);
    }
    /**
     * The name of the transformation.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The name of the transformation.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Path to where the back-end is mounted within Vault.
     * 
     */
    @Export(name="path", type=String.class, parameters={})
    private Output<String> path;

    /**
     * @return Path to where the back-end is mounted within Vault.
     * 
     */
    public Output<String> path() {
        return this.path;
    }
    /**
     * The name of the template to use.
     * 
     */
    @Export(name="template", type=String.class, parameters={})
    private Output</* @Nullable */ String> template;

    /**
     * @return The name of the template to use.
     * 
     */
    public Output<Optional<String>> template() {
        return Codegen.optional(this.template);
    }
    /**
     * Templates configured for transformation.
     * 
     */
    @Export(name="templates", type=List.class, parameters={String.class})
    private Output<List<String>> templates;

    /**
     * @return Templates configured for transformation.
     * 
     */
    public Output<List<String>> templates() {
        return this.templates;
    }
    /**
     * The source of where the tweak value comes from. Only valid when in FPE mode.
     * 
     */
    @Export(name="tweakSource", type=String.class, parameters={})
    private Output</* @Nullable */ String> tweakSource;

    /**
     * @return The source of where the tweak value comes from. Only valid when in FPE mode.
     * 
     */
    public Output<Optional<String>> tweakSource() {
        return Codegen.optional(this.tweakSource);
    }
    /**
     * The type of transformation to perform.
     * 
     */
    @Export(name="type", type=String.class, parameters={})
    private Output</* @Nullable */ String> type;

    /**
     * @return The type of transformation to perform.
     * 
     */
    public Output<Optional<String>> type() {
        return Codegen.optional(this.type);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Transformation(String name) {
        this(name, TransformationArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Transformation(String name, TransformationArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Transformation(String name, TransformationArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("vault:transform/transformation:Transformation", name, args == null ? TransformationArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Transformation(String name, Output<String> id, @Nullable TransformationState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("vault:transform/transformation:Transformation", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Transformation get(String name, Output<String> id, @Nullable TransformationState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Transformation(name, id, state, options);
    }
}
