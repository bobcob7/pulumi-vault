// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package identity

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages policies for an Identity Group for Vault. The [Identity secrets engine](https://www.vaultproject.io/docs/secrets/identity/index.html) is the identity management solution for Vault.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-vault/blob/master/website/docs/r/identity_group_policies.html.markdown.
type GroupPolicies struct {
	s *pulumi.ResourceState
}

// NewGroupPolicies registers a new resource with the given unique name, arguments, and options.
func NewGroupPolicies(ctx *pulumi.Context,
	name string, args *GroupPoliciesArgs, opts ...pulumi.ResourceOpt) (*GroupPolicies, error) {
	if args == nil || args.GroupId == nil {
		return nil, errors.New("missing required argument 'GroupId'")
	}
	if args == nil || args.Policies == nil {
		return nil, errors.New("missing required argument 'Policies'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["exclusive"] = nil
		inputs["groupId"] = nil
		inputs["policies"] = nil
	} else {
		inputs["exclusive"] = args.Exclusive
		inputs["groupId"] = args.GroupId
		inputs["policies"] = args.Policies
	}
	inputs["groupName"] = nil
	s, err := ctx.RegisterResource("vault:identity/groupPolicies:GroupPolicies", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &GroupPolicies{s: s}, nil
}

// GetGroupPolicies gets an existing GroupPolicies resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGroupPolicies(ctx *pulumi.Context,
	name string, id pulumi.ID, state *GroupPoliciesState, opts ...pulumi.ResourceOpt) (*GroupPolicies, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["exclusive"] = state.Exclusive
		inputs["groupId"] = state.GroupId
		inputs["groupName"] = state.GroupName
		inputs["policies"] = state.Policies
	}
	s, err := ctx.ReadResource("vault:identity/groupPolicies:GroupPolicies", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &GroupPolicies{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *GroupPolicies) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *GroupPolicies) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Defaults to `true`.
func (r *GroupPolicies) Exclusive() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["exclusive"])
}

// Group ID to assign policies to.
func (r *GroupPolicies) GroupId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["groupId"])
}

// The name of the group that are assigned the policies.
func (r *GroupPolicies) GroupName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["groupName"])
}

// List of policies to assign to the group
func (r *GroupPolicies) Policies() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["policies"])
}

// Input properties used for looking up and filtering GroupPolicies resources.
type GroupPoliciesState struct {
	// Defaults to `true`.
	Exclusive interface{}
	// Group ID to assign policies to.
	GroupId interface{}
	// The name of the group that are assigned the policies.
	GroupName interface{}
	// List of policies to assign to the group
	Policies interface{}
}

// The set of arguments for constructing a GroupPolicies resource.
type GroupPoliciesArgs struct {
	// Defaults to `true`.
	Exclusive interface{}
	// Group ID to assign policies to.
	GroupId interface{}
	// List of policies to assign to the group
	Policies interface{}
}
